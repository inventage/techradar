Technologie,Quadrant,Ring,Beschreibung
API-first Development,Konzepte und Methoden,Verbreiten (Adopt),"Beim API-first-Ansatz erfolgt der Entwurf und die Entwicklung der Schnittstelle vor deren Implementierung.
Durch dieses Vorgehen wird die Aufmerksamkeit gleich zu Beginn auf das Datenmodell und die Geschäftslogik gelenkt, was in der Regel zu robusteren Schnittstellen führt.
Der Schnittstellenentwurf kann auch als Vertrag betrachtet werden, auf den verschiedene Teams parallel hinarbeiten. Dieser Aspekt spielt bei der Grösse der Projektteams innerhalb der Inventage jedoch noch keine entscheidende Rolle.
Durch den Einsatz von Codegeneratoren (wie z.B. OpenAPI Generator für OpenAPI-Schnittstellen) kann bei Bedarf ein Gerüst für verschiedene Client- und Server-Implementierungen (auch in unterschiedlichen Sprachen) generiert werden. Dies vermindert den Aufwand für das Schreiben von reinem Infrastruktur-Code. Auch wenn von dieser Möglichkeit kein Gebrauch gemacht wird, können mit geeigneten Tools (wie z.B. Swagger-UI zu Testzwecken Clients generiert werden, mit deren Hilfe die Schnittstelle schon während des Entwurfs getestet werden kann.
Auch wenn mit diesem Ansatz bei Inventage gute Erfahrungen gemacht wurden und er deshalb hier zur Verbreitung empfohlen wird, soll seine Anwendung nicht als Zwang verstanden werden. Es steht jedem Team frei, bei rein internen APIs auch den Code-first-Ansatz zu wählen."
Architectural Decision Record (ADR),Konzepte und Methoden,Abschätzen (Assess),"Architectural Decision Records (ADR) sind ein leichtgewichtiger Ansatz, um wichtige Entscheidungen zu dokumentieren, welche die Architektur betreffen. ADRs werden in der Regel in Markdown-Dateien neben dem Code in einem Versionskontrollsystem gespeichert. Sie dokumentieren den Kontext und die Konsequenzen einer Entscheidung. Die Inventage AG setzt ADRs bereits bei einigen Projekten ein, um Neukömmlinge eines Projektes auf einen akzeptablen Wissensstand zu bringen. Dank den ADRs erübrigen sich häufig wiederkehrende Fragen, weswegen gewisse Entscheidungen getroffen worden sind und entlasten dadurch das Team."
Artificial Intelligence,Konzepte und Methoden,Abschätzen (Assess),"Unter Artificial Intellgence (AI) versteht man menschliches Lernen und Dencken auf Computer zu übertragen. Mit GPT-3, DALL-E und Stable Diffusion wurden im letzten Jahr bereits Deep-Learning Modelle entwickelt, die bereits so ausgereift sind, dass darauf Produkte entwickelt werden können. AI wird in Zukunft mit Sicherheit eine grosse Rolle in der Digitalisierung spielen.
Als Inventage wollen wir herausfinden, was diese Entwicklung für uns bedeutet. Selbst wollen wir keine AI Technologien entwicklen, unsere Stärken liegen in anderen Bereichen. Wir wollen uns aber stärker mit dem Thema AI auseinandersetzen und herausfinden, was für AI Services es auf dem Markt gibt und wie wir diese gewinnbringend für unsere Kunden einsetzen und in ihre Applikationen verbauen können.
Mögliche Einsätze von AI in Applikationen unserer Kunden sind:
Recommender Systems: Systeme, die das Verhalten von Benutzern untersuchen und daraus versuchen Vorhersagen über das Interesse eines Benutzers für personalisierte Vorschläge zu machen.
Conversational Interfaces: Chatbots sind eine Form von Conversation Interfaces. Im Gegensatz zu strukturieren Web GUIs können benutzer auf natürliche Weise mit dem System ""sprechen"" was für eine verbesserte Kundenbetreuung sorgen kann.
Annomalie Detection: Das System erkennt Unregelmässigkeiten automatisch und macht den Betreiber der Software darauf aufmerksam, was zum Beispiel für Betrugserkennung eingesetzt werden kann.
Tracking: Das Kundenverhalten wird analysiert indem die Interaktion vom Benutzer mit der Software aufgezeichnet wird. Über AI kann aus diesem Verhalten wichtige Informationen für die Weiterentwicklung der Software oder Produkte gewonnen werden."
Automatisiertes E2E Testing,Konzepte und Methoden,Testen (Trial),
Buildless Web Development,Konzepte und Methoden,Testen (Trial),"Viele der heutigen Web Development Tools sind entstanden, weil die Entwicklung der Webbrowser hinter derjenigen der Sprachen war. Heute sieht die Situation anders aus und moderne Browser unterstützen die meisten modernen Sprachfeatures. 
Wir sind überzeugt, dass Web Entwickler als Erstes die Plattform und deren APIs kennen müssen—noch vor allen Frameworks, die ohnehin alle auf dieser Plattform aufbauen. Insbesondere bei der Entwicklung kann für viele Arbeitsabläufe auf die Browserfunktionalität zurückgegriffen und werden. So werden die nicht unbedingt notwendigen Transformationsschritte weggelassen, beim Programmcode werden moderne Sprachfeatures verwendet, weil sie direkt vom Browser interpretiert werden können.
Es ist uns bewusst, dass es heute für produktive Releases in der Regel nicht ohne einen «Build» geht. Speziell dann, wenn unser Programmcode in einer Vielzahl und nicht nur in modernen Browsern lauffähig sein muss. Wir hoffen, es ist nur eine Frage der Zeit, bis sich die Browser-Landschaft so weit modernisiert, dass in Zukunft immer weniger Arbeitsschritte benötigt werden, um modernen Programmcode einer noch breiteren Masse zugänglich zu machen."
CI/CD,Konzepte und Methoden,Verbreiten (Adopt),"CI/CD – Continuous Integration und Continuous Delivery – sind Methodiken des Software-Engineering bei denen Codeänderungen am Produkt mit möglichst kleiner zeitlicher Verzögerung und kleinem manuellem Aufwand gebaut, getestet und zu einem Produkt zusammengefügt (""integrated"") wie auch in einem geeigneten Format ausgeliefert (""delivery"") werden. Ein weiterer Schritt ist das automatisierte (ggf. auf Knopfdruck) Installieren der Software auf dem Zielsystem (""Continuous Deployment"").
Die Methodik trägt massgeblich zur Qualität von Software bei, da Probleme unmittelbar sichtbar werden und ermöglicht sehr viel schnellere Entwicklungszyklen, da Änderungen am Code bereits kurze Zeit später auf Testumgebungen von den Benutzern getestet werden können, sowie im Erfolgsfall umgehend auf einer produktiven Umgebung installiert.
Wir setzen stark auf CI/CD und streben zunehmend die vollständige Automatisierung des kompletten Release-Zyklus an. Neuere Projekte setzen dies in der Regel bereits um. Wir erreichen dies durch Einsatz geeigneter Tools wie bislang dem Jenkins Buildserver sowie zunehmend container-basierter Buildsysteme wie z.B. GitHub Actions,  Gitlab CI."
Codequaliät,Konzepte und Methoden,Verbreiten (Adopt),"Erfolgreiche Software zeichnet sich nicht nur durch ihre Funktionalität oder die die Anzahl Features aus, sondern sollte auch eine hohe Codequaliät vorweisen. Code mit hoher Qualität ist weniger fehleranfällig und erfordert dadurch weniger Fehlerbehebung, was Zeit und Geld spart. Die Software läuft zuverlässiger und wird weniger Ausfälle verursachen, wodurch die Benutzer und Kunden profitieren. Gut strukturierter Code is wartbar und lässt sich leiter erweitern und skalieren, was bei wachsenden Anforderungen zu Gute kommt. Gut lesbarer Code lässt sich einfacher verstehen und erleichtert dadurch die Zusammenarbeit im Team. Nicht zuletzt steigert eine hohe Codequaliät auch die Sicherheit der Software.
Um eine hohe Codequaliät zu gewährleisten verwenden wir verschiedene statische Code-Analyse-Tools (Checkstyle, SpotBugs, PMD, Hadolint, ESLint), welche uns dabei unterstützen den Code nach möglichen Fehlern und Problemen zu untersuchen und uns auf Best Practices aufmerkam machen. Über Unit-Tests stellen wir sicher, dass der Programmcode korrekt funktioniert und dass Änderungen nicht unbeabsichtigt negative Auswirkungen haben. Sowohl statische Code-Analyse-Tools sowie Unit-Tests unterstützen uns bei der Entwicklung direkt aus der IDE heraus und werden zusätzlich bei jedem Build ausgeführt, um frühzeitig auf allfällige Fehler und Probleme hinzuweisen.
Die Nachvollziebarkeit von Code Änderungen wird über das Versionierungs Tool Git sichergestellt. Änderungen, welche für die Produktion bestimmt sind, werden über Pull Requests und Code-Reviews diskutiert, bevor sie appliziert werden.
Um eine hohe Codequaliät zu erreichen braucht es meist einen zusätzlichen Aufwand, wir sind aber davon überzeugt, dass sich dieser Aufwand lohnt und die Investition sich langfristig auszahlt."
DDD,Konzepte und Methoden,Testen (Trial),"Domain Driven Design (DDD) hilft bei der Implementation von Fachapplikationen. Zentral ist dabei die Verwendung einer einheitlichen und präzisen Prosa Sprache für die Beschreibung von Abstraktionen (Modellen) zwischen Entwicklern und Fachpersonen. Es wird zwischen einem taktischen und einem strategischen Teil unterschieden. Der taktische Teil behandelt die verschiedenen Verantwortlichkeiten (Stereotypen/Building Blocks) der Klassen. In Kombination mit einer Packagestruktur gemäss hexagonaler- / Onion Architektur ergibt sich daraus eine klar nachvollziehbare und [leicht zu testende Implementation](https://livebook.manning.com/book/effective-software-testing/chapter-7/137). Der strategische Teil bietet Konzepte für die Abgrenzung und Integration mehrerer Bereiche untereinander und dient damit vor allem der Architekturstufe.
Bei Inventage haben wir DDD (taktisch und strategisch) erfolgreich in mehreren Projekten eingesetzt. Bei Projekten für Fachbereiche sehen wir in DDD den grössten Nutzen. Aus diesem Grund empfehlen wir DDD in weiteren Projekten einzusetzen und zu testen. Die Lernkurve für DDD ist leider aufgrund der aktuell verfügbaren Literatur noch etwas holprig."
Design Tokens,Konzepte und Methoden,Abschätzen (Assess),"Design Tokens bilden die Basis von Design-Systemen. Mit ihrer Hilfe werden Designentscheidungen benannt, gespeichert und verteilt, sodass sie in verschiedenen Design-Tools und Programmiersprachen verwendet werden können. Sie ermöglichen Produkte mit einer konsistenten UI-Sprache für verschiedene Systemen und unter Einbezug von vielen Stakeholder zu bauen.
Vorläufer von Design Tokens werden in fast allen unseren Projekten primär im CSS als Variablen abgebildet. Hier unterscheiden wir zwischen Kompilierzeitvariablen (SASS Variablen) und Laufzeitvariablen (CSS Custom Properties). Viele unsere Projekte sind mandantenfähig. In solchen Systemen sind primär die Laufzeitvariablen interessant, weil sie eine Anpassung des Produkts direkt im Browser und ohne einen Build ermöglichen. Damit wird das Theming eines Produkts vereinfacht.
Obwohl nicht jedes Projekt die nötige Grösse hat, um dazu gleich auch ein Design-System zu bauen, möchten wir in Zukunft noch mehr Erfahrung mit solchen Laufzeitkonfigurationen mithilfe von Design Tokens sammeln. Wo möglich und sinnvoll, im Rahmen eines eigenen oder bestehenden Design-Systems."
GraphQL,Konzepte und Methoden,Verbreiten (Adopt),"GraphQL ist eine Schnittstelle für den lesenden und schreibenden Datenzugriff über das HTTP Protokoll. Es stellt eine Alternative zu REST dar und bietet gegenüber dieser den Vorteil, dass die Datentiefe und -breite bei einem Aufruf gesteuert werden kann.
Wir haben beim Einsatz von GraphQL einen grossen Gewinn an Flexibilität bei der Entwicklung feststellen können. Sei es durch eine weniger starke Kopplung zwischen Datenproduzent und -konsument oder bei der Nutzung der gleichen Daten von unterschiedlichen Datenkonsument. Daneben führt die Verwendung zu einer effizienten Datenverarbeitung und -transfer, weil nur die benötigten Daten bereitgestellt und übertragen werden müssen.
Aufgrund unserer Erfahrungen bei mehrfachen Projekteinsätzen können wir die breite Verwendung von GraphQL stärkstens empfehlen. Zur Unterstützung setzen wir häufig Hasura ein. Es ist ein OpenSource Werkzeug für die Bereitstellung einer GraphQL Fassade vor bestehende Datenspeicher."
Hybride Mobile Applikationen,Konzepte und Methoden,Testen (Trial),"Immer wieder sind wir bei unseren Kundenprojekten mit Anfragen für mobile Applikationen konfrontiert. Eine der wichtigsten Anforderungen dabei ist oft eine Applikation im jeweiligen Store der wichtigsten Anbieter. Native Mobile Apps gehören allerdings nicht zu unserem Service Portfolio. 
Im Web bieten sich Progressive Web Apps (PWAs) an, um «App-like» Benutzererlebnisse zu bauen. Obwohl solche Applikationen heute grundsätzlich in den App-Stores publiziert werden können, ist die Unterstützung der Features nicht bei allen Anbietern gleich gut und der Publikations- und Update-Prozess nicht ganz trivial.
Um den Kundenanforderungen gerecht zu werden und gleichzeitig den Technologiefokus im Web zu behalten, haben wir bereits Erfahrungen mit hybriden mobile Applikationen sammeln können. Es sind schlanke Wrapper-Applikationen, die nativ in der jeweiligen Programmiersprache (Swift für iOS und Java für Android) geschrieben werden und als Inhalt die Web-Applikation über WebViews einbinden. Das hat den grossen Vorteil, dass man Apps jeweils über die plattformspezifischen, nativen Mechanismen publizieren kann, den Inhalt aber trotzdem als responsive Web-Applikation umsetzen kann. Updates an den Apps in den Stores müssen nur selten eingegeben werden, weil jeweils die neueste Version der Inhalte aus dem Web geladen wird. Zudem sind Erweiterungen und Integrationen der Web-Version mit der nativen Welt grundsätzlich möglich."
Infrastructure-As-Code,Konzepte und Methoden,Verbreiten (Adopt),"Infrastructure as code (IaC) ist ein Konzept mit dem Ziel die Bereitstellung und das Management von Infrastrukturkomponenten (Server, Cluster, etc.) in Code abzubilden, und durch automatisierte Prozesse auszuführen. Durch Versionierung vom Code in Git sind alle Änderungen an der Infrastruktur protokolliert und verhindern so auch das Aufkommen von Configuration Drift und Snowflake Systemen.
Durch Automatisierung und entsprechdes Tooling (z.B. Terraform https://www.terraform.io/) können Best-Practises wie Testing oder CICD aus der Software-Entwicklung auch auf Infastruktur-Komponenten angewendet werden.
Unserer Erfahrung nach können mit IaC und Terraform neue Umgebungen viel schneller und reproduzierbarer bereitgestellt werden."
Living Documentation,Konzepte und Methoden,Abschätzen (Assess),"Living documentation hat zum Ziel, die Anforderungen eines Systems und die Implementierung näher zueinander zu bringen. Es findet ihren Ursprung in der Welt von Behavior Driven Development und ist ähnlich wie Idee der Ausführbaren Spezifikationen. In der Regel wird dieser Ansatz umgesetzt, indem Akzeptanzkriterien in User Stories erfasst werden, für welche dann automatisierte Akzeptanztests geschrieben werden. Diese Akzeptanztests werden automatisch bei jeder Änderung des Systems ausgeführt und dokumentieren so die aktuell umgesetzten Features des Systems. Weil die Inventage AG die meisten Ihrer Projekte in agiler Form umsetzen, macht dieser Ansatz Sinn. Bei einigen Projekten wird bereits teilweise in diese Richtung gearbeitet."
Microservice-Architektur,Konzepte und Methoden,Verbreiten (Adopt),"Microservices sind ein Architekturstil, bei dem eine Anwendung als Sammlung kleiner, unabhängiger Dienste entwickelt wird, die zusammenarbeiten, um eine grössere Funktionalität zu bieten. Die einzelnen spezialisierten Dienste kommunizieren miteinander über Netzwerkaufrufe.
Bei Inventage erweitern wir die Definition von Microservices auf das Frontend. Ein Mircoservice besteht sowohl aus Micro-Backend als auch aus Micro-Frontend. Mit dem Micro-Frontend Ansatz werden unabhängig voneinander lieferbare Frontend-Anwendungen zu einem grösseren Ganzen zusammengefügt. Um solche Micro-Frontends zu entwicklen, eigenen sich aus unserer Sicht WebComponents (→ WebComponents).
Der Hauptvorteil von Microservices besteht darin, dass die Aufteilung der Applikation in einzelne Dienste es ermöglicht, Anwendungen schneller und flexibler zu entwickeln. Jeder einzelne Microservice ist weniger abhängig von anderen Teilen der Anwendung. Die Applikation lässt sich einfach erweitern, indem neue Microservices entwickelt und in die bestehende Architektur integriert werden.
Unsere Erfahrung zeigt aber auch, dass Microservices zu einer erhöhten Komplexität bei der Entwicklung und Wartung führen. Einerseits aufgrund der Kommunikation der einzelnen Services über Netzwerkaufrufe, die möglicherweise die Verwaltung von Fehlern und die Überwachung von Leistungsproblemen erfordern. Andererseits aufgrund der expliziten Trennung des eigentlichen Codes, was Refactorings der Schnittstellen erschwert.
Zudem braucht es viel Erfahrung, die Funktionalität sinnvoll in einzelne Dienste zu unterteilen. Wenn es die Anforderungen an die Applikation erlauben haben wir bei Inventage gute Erfahrungen gemacht die Applikation anhand der unterschiedlichen Benutzergruppen aufzuteilen. Indem der Dienst einer Benutzergruppe mehrfach installiert wird, lässt sich auf diese Weise auch eine Mandantenfähigkeit elegant lösen.
Über Microservices lassen sich moderne Applikationen in der Cloud entwicklen. Eine genaue Analyse der Anforderungen und ein Abwähgen der Vor- und Nachteile ist aber in jedem Fall erfolderlich. Nicht immer sind Microservices die einzige Lösung, wie eine Software umgesetzt werden kann. Eine Alternative zur Microservice-Architekur ist zum Beispiel der Modulare Monolith (→ Modularer Monolith), bei welchem ein Monolith in austauschbare und wiederverwendbare Module unterteilt wird."
Modularized Monolith,Konzepte und Methoden,Verbreiten (Adopt),"Bei Modularen Monolithen handelt es sich um einen Architekturstil, welcher die Unterteilung einer Applikation in austauschbare Module mit minimalen Beziehungen vorsieht. Im Gegensatz zu Microservices (-> Microservice-Architektur) werden diese jedoch innerhalb derselben Runtime ausgeführt und verwenden dieselbe Datenbank. Dies setzt voraus, dass die Module auf demselben Technologie-Stack implementiert werden und dieselben Dependencies verwenden.
Das Konzept versucht damit einige der architektonischen und operationellen Nachteile der Microservice-Architektur zu adressieren und dabei möglichst viele der unbestrittenen Vorteile zu bewahren. So können beispielsweise Transaktionen über Modulgrenzen hinweg bestehen, was das häufig aufwändige Kompensieren von Aktionen im Fehlerfall überflüssig macht. Andererseits ist es ohne weiteres möglich, für Querschnittsfunktionen denselben Code wiederzuverwenden. Schliesslich gestaltet sich der Betrieb aufgrund der geringeren Anzahl von Komponenten und Schnittstellen einfacher.
Modulare Monolithen sind jedoch auch mit Nachteilen behaftet. So geht die Fähigkeit verloren, Services unterschiedlichen Release-Zyklen zu unterwerfen. Im Vergleich zu Microservices leidet die Skalierbarkeit, da nur die ganze Applikation – und nicht einzelne Services – parallel depoloyed werden kann. Zu guter Letzt ist es notwendig, die Modulgrenzen zu schützen. Dies kann mittels Überwachung der Beziehungen zwischen Modulen als Teil des Build-Prozesses durch ArchUnit (-> ArchUnit) realisiert werden."
Secure Software Supply-Chain,Konzepte und Methoden,Verbreiten (Adopt),
Server Side Rendering (SSR),Konzepte und Methoden,Abschätzen (Assess),"Server Side Rendering (SSR) hat zum Ziel, häufig auftretende Probleme von Single Page Applications (SPA) zu lösen. Dazu gehören eine langsame Zeit, bis der erste Inhalt sichtbar ist, sowie Search Engine Optimization (SEO). SSR verbessert diese Probleme, indem ein Server die endgültige HTML-Datei zubereitet und an den Client schickt. Der Client fügt dann die notwendige Interaktivität hinzu in einem Prozess, den man Hydration nennt. Die Inventage AG positioniert sich als Experte in allen Bereich des Software Engineering, dazu gehört auch die Frontend-Entwicklung. Deswegen macht es auch Sinn, moderne Ansätze wie SSR zu beobachten und zu evaluieren. Konkret eingesetzt wird dieser Ansatz zurzeit nur bei statischen Webseiten ohne Interaktivität."
Solid,Konzepte und Methoden,Abschätzen (Assess),"[Solid](https://solidproject.org/) ist eine [Spezifikation](https://github.com/solid/specification) der [W3C Solid Working Group](https://lists.w3.org/Archives/Public/public-solid/2022Nov/0001.html) für Systeme, welche es den Benutzern erlauben ihre Daten in sicheren und dezentralen Speichern (Pod) zu halten. Damit können sie in Kontrolle ihrer eigenen Daten bleiben und diese gezielt anderen zur Verfügung stellen. Die Verwendung von [Linked Data](https://www.w3.org/standards/semanticweb/data) und dessen standardisiertem Datenformat ermöglicht dabei die Verlinkung über die Grenzen eines Pods hinweg und ist damit die Grundlage des Sematic Web. Dank dem gemeinsamen Datenformat (RDF) ist es zudem möglich eine Trennung der Daten von den sie bearbeitenden Applikationen zu erreichen.
Wir beobachten mit grossem Interesse die Entwicklung von Solid und die immer grösser werdende Verbreitung (vgl. Belgien, BBC) und sammeln mit Prototypen erste Erfahrungen. Weil viele unserer Kunden bereits über ein hohes Vertrauensverhältnis zu deren Endkunden verfügen, sehen wir für unsere Kunden die Chance als Pod Anbieter aufzutreten und dadurch ganz neue und innovative digitale Dienste anbieten zu können."
Web Components,Konzepte und Methoden,Verbreiten (Adopt),
Zero Bug Policy,Konzepte und Methoden,Abschätzen (Assess),"In vielen Organisationen wird der Pflege des Backlogs grosse Aufmerksamkeit zuteil. Im Backlog finden sich neben Stories, welche neue Anforderungen adressieren auch Bugs. Selbstredend liegt es für den Produktverantwortlichen nahe, neue Funktionalität höher zu priorisieren, sodass das Reparieren von Bugs – oder genereller die Arbeit am «Technical Debt» - häufig das Nachsehen hat. Mit der Zeit wächst die Zahl der Bugs. Diese werden mit Screenshots und Datenbeispielen dokumentiert und die Schritte zum Reproduzieren werden festgehalten. Dann wird das Risiko abgeschätzt und der Impact auf das Business beim Verantwortlichen erfragt. Mit der Weiterentwicklung der Software altern die Bugs und diese Schritte werden mit wachsendem Aufwand periodisch wiederholt.
Die Zero Bug Policy verlangt, dass die Anzahl Bugs nicht anwachsen darf. Werden in einem Sprint neue Bugs rapportiert müssen sie entweder im nächsten Sprint gelöst werden. Ist dies nicht der Fall, werden sie gelöscht. Der Gedanke dabei ist, dass Bugs, die ohnehin nicht repariert werden, auch nicht unterhalten werden sollen."
GraalVM,Plattformen,Abschätzen (Assess),
GraalVM,Plattformen,Abschätzen (Assess),"Mit Hilfe der GraalVM lassen sich äusserst performante Applikationen mit niedrigem Ressourcenbedarf erstellen. GraalVM ist Polyglot, dass heisst es lassen sich z.B Applikationen schreiben, welche Bibliotheken verwenden, die in anderen Sprachen (Java, Javascript, R, Ruby, Python, ...) geschrieben wurden.
Da auf GraalVM optimierte Applikationen wenig Resourcen benötigen, ist die GraalVM eine ideale Plattform um Cloud Applikationen zu erstellen.
Quarkus Applikationen lassen sich auch für die GraalVM bauen. Bei Inventage möchten herausfinden, ob sich die GraalVM in der Praxis bewährt. Ob der Zusatzaufwand für einen GraalVM Build gerechtfertigt ist. Und wie und ob wir die Polyglossie der GraalVM für unsere Zwecke zum Vorteil verwenden können."
Kafka,Plattformen,Verbreiten (Adopt),"Apache Kafka ist eine Open Source Event Streaming Plattform, welche in den letzen Jahren sehr viel Popularität erlangt hat. Wir verwenden Kafka bei unseren Uniport Projekten und realisieren damit Use-Cases wie asynchrone Kommunikation zwischen Micro Services oder die Implementierung des ""Transactional Outbox"" Patterns (https://microservices.io/patterns/data/transactional-outbox.html) mittels Debezium (link zu Debezium). Die Architektur von Kafka unterscheidet sich von klassischen Message Brokern (z.B. RabbitMQ). Kafka ist ein persistenter Message Bus, welcher Events (Messages) in einer geordneten Sequenz vorhält. Events können dadurch mehrfach gelesen werden, womit sich Kafka auch für die Realisierung von weiteren Microservice Architektur-Patterns wie z.B. Event-Sourcing sehr gut eignet."
Kubernetes,Plattformen,Verbreiten (Adopt),"Kubernetes ist ein Open-Source-System für die Orchestrierung von Container-Anwendungen. Die Kernfunktionalitäten von Kubernetes bilden hierbei das automatische Starten von Containern im Bedarfsfall – sei es aufgrund hoher Last oder eines Ausfalls, das Überwachen der laufenden Container und das Verteilen der Last zwischen verschiedenen Containern. Kubernetes erlaubt es so, grosse Anwendungen mit vielen Containern mit deutlich weniger Ressourcen und mehr Flexibilität hinsichtlich Skalierbarkeit zu realisieren. Kubernetes ist bei einer Vielzahl unserer Kunden erfolgreich im Einsatz."
RedPanda,Plattformen,Abschätzen (Assess),"Redpanda ist eine Kafka-kompatible Daten-Streaming Plattform. Sie ist gemäss Webseite leichter, performanter und einfacher im Setup.
In unseren Cloud basierten Microservice Applikationen werden Daten oft via Kafka gestreamt. 
Wir möchten daher überprüfen ob RedPanda wirklich ein leichterer performanterer drop-in Ersatz für Kafka ist, der den Ansprüchen in der Entwicklung oder in der Produktion bezüglich Stabilität, Performance und Ressourcen-Bedarf Kafka ebenbürtig ist oder sogar übertrift."
Web Assembly,Plattformen,Abschätzen (Assess),"Kompiliere beliebige Programmiersprachen zu Web Assembly um den Code im Browser auszuführen. Die Ausführung als Binary ist performant und die Stack Machine entlastet den Main Thread. Rechenintensive Algorithmen können ins Frontend portiert werden und Server und Netzwerk wird entlastet. Backend Code kann direkt für den Browser aufbereitet und wiederverwendet werden. Dies ist für eine Reihe von Use Cases interessant, wie z.B. Verschlüsselung, Signierung, Komprimierung, Visualisierungen und Simulationen."
Angular,"Libraries, Frameworks und Programmiersprachen",Verbreiten (Adopt),"Als etabliertes Framework zur Erstellung von Webapplikationen hat sich Angular auch in unserem Umfeld bestens bewährt. Für viele Problemstellungen, die innerhalb einer Webapplikation gelöst werden müssen, bringt Angular passende und durchdachte Lösungen bzw. Konzepte mit. Entwickler finden sich in unterschiedlichen Projekten schnell zurecht, da sie auf bekannte Muster treffen, ohne jeweils neue Library-Stacks zu erlernen. Als TypeScript-basiertes Framework bringt Angular aufgrund der sprachlichen Vorteile gegenüber JavaScript-basieren Frameworks die Voraussetzung mit, auch in grösseren Projekten mit hohem Qualitätsanspruch eingesetzt zu werden  (→ TypeScript)."
Apache Tomcat,"Libraries, Frameworks und Programmiersprachen",Halten (Hold),"Ein robuster open-source Servlet Container und Webserver, den wir in einigen frühen Projekten zum Einsatz brachten. Mit der Verwendung von JEE Features in Projekten genügte er den Anforderungen nicht mehr und wurde bei neueren Projekte durch Red Hat Wildfly ersetzt. Bei neuen Projekten verzichten wir nach Möglichkeit ganz auf konventionelle Applikationsserver. (Bemerkung: Warum ist dieser Eintrag über den uralten Tomcat und nicht über Wildfly?)"
Apache Wicket,"Libraries, Frameworks und Programmiersprachen",Halten (Hold),
ArchUnit,"Libraries, Frameworks und Programmiersprachen",Verbreiten (Adopt),"ArchUnit erlaubt es, die Architektur einer Software zu definieren und dann in der Form von Unit Tests zu prüfen. Hierbei werden insbesondere die Abhängigkeiten zwischen Modulen (Packages) gegen Verstösse gegen diese Definition überprüft, sodass der Test scheitert, falls unerlaubte Referenzen eingefügt wurden.
Für den Architekturstil «Modularer Monolith» (-> Link Modularer Monolith) bietet ArchUnit ein wertvolles Werkzeug um sicherzustellen, dass die Modul-Grenzen respektiert werden."
Deno,"Libraries, Frameworks und Programmiersprachen",Abschätzen (Assess),"Deno ist eine JavaScript, TypeScript und WebAssembly Runtime. APIs orientieren sich an Browser Standards. Somit kann der selbe Code sowohl im Browser als auch in Deno ausgeführt werden. Diverse APIs sind per Default deaktiviert, um unerlaubte Nutzungen und Zugriffe zu verhindern. Mittels compability mode können Packages aus der NPM Registry und Node Module APIs verwendet werden. Deno kann als Fundament für Task Runner, Utility Script und Web Services genutzt werden und und hat das Potential Node.js abzulösen."
Guice,"Libraries, Frameworks und Programmiersprachen",Halten (Hold),
Java EE,"Libraries, Frameworks und Programmiersprachen",Halten (Hold),
JavaScript,"Libraries, Frameworks und Programmiersprachen",Halten (Hold),"Die fehlende Typisierung der Sprache erschwert das Refactoring einer JavaScript-Codebasis. Dieser Umstand schlägt sich schliesslich negativ auf die Wartbarkeit und die Codequalität einer Applikation nieder. Stattdessen setzen wir für grössere (Frontend-) Projekte auf TypeScript, womit sich eine hohe Codequalität auch auf lange Sicht effizient sicherstellen lässt."
jOOQ,"Libraries, Frameworks und Programmiersprachen",Testen (Trial),"JPA und Hibernate sind De-facto-Standards für Datenbank-Zugriffe in Java, auch bei Inventage. Mit steigender Komplexität von Datenbankabfragen wächst aber auch das Unbehagen beim Formulieren derselben in der zur Verfügung stehenden Criteria API. Greift man auf Native Queries zurück, verliert man die Typsicherheit.
Die Suche nach ORM-Alternativen, welche sich stärker an SQL und den Möglichkeiten der Datenbanken orientieren, führte uns zu jOOQ (Java Object Oriented Querying), welches SQL als interne DSL in Java abbildet, so dass Datenbank-Abfragen typsicher und direkt in Java formuliert werden können.
Bisher wurde jOOQ in der Inventage noch in keinem Projekt eingesetzt. Erste Evaluationen waren jedoch jeweils so vielversprechend, dass wir uns entschieden haben, diese Library dem Ring ""Testen"" zuzuordnen und auch einmal in einem Projekt einzusetzen, um mehr Erfahrung damit zu sammeln. Ein mögliches Vorgehen könnte sein, jOOQ für komplexere Reporting- und Batch-Processing-Tasks zu verwenden, während die typischen CRUD-Tasks weiterhin mit einem OR-Mapper umgesetzt werden."
Kotlin,"Libraries, Frameworks und Programmiersprachen",Testen (Trial),"Kotlin ist eine statisch typisierte Programmiersprache, die Konzepte aus der objektorientierten und der funktionalen Programmierung vereint, und viele moderne Sprachfeatures mitbringt. Kotlin-Code wird vom Compiler in Bytecode für die JVM übersetzt [1], wobei eine grösstmögliche Interoperabilität [2] beider Sprachen gewährleistet wird. Dadurch lassen sich in Kotlin Java-Libraries und -Frameworks problemlos weiterverwenden, womit bestehendes Knowhow für den Java-Programmierer keinesfalls obsolet wird. Diese Interoperabilität erlaubt auch die Integration von Kotlin in bestehende Java-Projekte, womit sich Applikationen schrittweise modernisieren lassen.
Java als Plattform, auf die wir auch in Zukunft setzen möchten, hat sich für Enterprise-Applikationen über viele Jahre bestens bewährt. Durch das Commitment zur Rückwärtskompatibilität sind der Modernisierung von Java als Programmiersprache jedoch enge Grenzen gesteckt. Genau hier sehen wir grosses Potential in Kotlin, das beide Welten — bewährte Plattform und moderne Programmiersprache — in sich vereinen kann.
[1] Neben JVM-Bytecode kann Kotlin auch nach JavaScript oder nativen Programmdateien (MacOS, Windows, Linux) übersetzt werden.
[2] Kotlin-Code kann Java-Code aufrufen und umgekehrt."
Lit,"Libraries, Frameworks und Programmiersprachen",Verbreiten (Adopt),"Mit Lit können effizient agnostische UI Komponenten für den Browser erstellt werden. Die plattform-nahe Library ermöglicht einen raschen Einstieg, hohe Wiederverwendbarkeit und einfache Komposition. Ein minimaler Footprint und eine durchdachte API sorgt für einen hohen Entwickler-/ und User-Komfort.
Primär setzen wir Lit für kleine und unabhängige UI Komponenten ein. Unter Einbezug von weiteren Libraries, z.B. für Routing, i18n und Validierung, realisieren wir auch komplette Business Applikationen."
OIDC,"Libraries, Frameworks und Programmiersprachen",Verbreiten (Adopt),
Quarkus,"Libraries, Frameworks und Programmiersprachen",Verbreiten (Adopt),"Mit Quarkus lassen sich für die Cloud optimierte Andwendungen entwickeln. Die etablierten und bewährten Java-Frameworks und -Bibliotheken (Best of Breed) können via Quarkus Extensions weiterhin verwendet werden. 
Quarkus stellt für uns eine leichtere Alternative zu JEE dar.
Aktuell realisieren wir einige Projekte basierend auf Quarkus. Als Monolithen und auch als Microservices im Openshift/Kubernetes Umfeld in Form von Portal-Lösungen.
Unsere Container-Applikationen und Kunden profitieren stark von Quarkus dank schneller Entwicklungszeit, Verwendung bestehender/bewährter Bibliotheken. Dank Optimierungen von Quarkus zur Build-Zeit kommen unsere Applikationen, Benutzer in den Genuss schnellem Applikations-Starts, niedrigem Bedarf an Memory, Speicher- und CPU-Ressourcen."
REST Assured,"Libraries, Frameworks und Programmiersprachen",Verbreiten (Adopt),
Spring Boot,"Libraries, Frameworks und Programmiersprachen",Verbreiten (Adopt),
Testcontainers,"Libraries, Frameworks und Programmiersprachen",Testen (Trial),"Testcontainers (for Java*) ist eine Bibliothek, welche die Verwendung von Docker Containern innerhalb von JUnit Tests vereinfacht. Wir verwenden Testcontainer unter anderem für die Realisierung von Integrationstests bei unseren Uniport-Projekten - z.B. um den Datenbankzugriffs-Layer zu testen. Weiter bietet https://quarkus.io/ eine sehr gute Integration von Testcontainers und der Einsatz bietet sich insbesondere bei allen unseren Quarkus basierten Projekten an.

(*) die Bibliothek gibt es auch für weitere Sprachen wie z.B. Go, Phython oder .NET"
Turbopack,"Libraries, Frameworks und Programmiersprachen",Abschätzen (Assess),"Turbopack ist ein next-generation bundler. Es positioniert sich als Nachfolger von Webpack und die Entwicklung wird vom Gründer von Webpack geleitet. Es ist um einiges schneller als die existierenden bundlers. Der Hauptgrund ist, dass Turbopack mit einer Ausführungseinheit namens Turbo Engine in Rust geschrieben ist. Diese Turbo Engine erlaubt die inkrementelle Kompilierung. In der Praxis bedeutet das, dass eine Funktion nur einmal aufgerufen wird und die Resultate davon zwischengespeichert werden. Weil die Inventage AG auch Expertise in der Frontend-Entwicklung besitzt, sind moderne Ansätze immer von Interesse. Turbopack ist von Interesse, weil es den Entwicklungsprozess beschleunigen kann."
TypeScript,"Libraries, Frameworks und Programmiersprachen",Verbreiten (Adopt),"TypeScript ist ein superset von JavaScript, welches eine statische Typisierung der Sprache erlaubt. Der source code wird mit einem Transpiler wieder in JavaScript transpilliert. Es vereinfacht und verbessert die Entwicklung von JavaScript Applikationen, da durch die zusätzliche Typisierung mehr Sicherheit beim Entwickeln entsteht. Da wir bei Inventage AG auch grosse Projekte mit viel Fokus auf Frontend haben, ist es uns sehr wichtig, dass auch dort die Qualität des Source Codes gewährleistet werden kann. Schon heute wird TypeScript in unseren Projekten eingesetzt, was bereits bemerkbar zu einer besseren Code Qualität und effizienter Entwicklung geführt hat. Aus diesem Grund empfehlen wir TypeScript, statt JavaScript, zu verwenden, weshalb wir diese Technologie gerne in unseren Projekten verbreiten möchten."
Argo CD,Tools,Verbreiten (Adopt),
asdf,Tools,Verbreiten (Adopt),"asdf ist ein command line basiertes version management tool für allerlei Systeme und tools. Statt separate version managers für Systeme wie z.B. node, maven, ruby, etc. zu verwenden, kann asdf alle gleichzeitig Verwalten. Dafür verwendet asdf ein Plugin-System, die man pro tool installieren muss. In Projekte kann zusätzlich sicher gestellt werden, dass alle Entwickler die gleiche Versionsnummer verwenden, indem man eine .tool-versions Datei hinzufügt, die alle Versionen der benötigten tools auflistet. Durch die Verwendung dieses version managers, werden Arbeitsprozesse und Know-how vereinheitlicht und vereinfacht somit das Arbeiten in Teams."
AsyncAPI,Tools,Abschätzen (Assess),
Bazel,Tools,Abschätzen (Assess),"Bazel ist ein von Google entwickeltes Open Source Build-Werkzeug, das mit komplexen Projekten, in denen verschiedene Sprachen und Plattformen eingesetzt werden, gut und effizient umgehen kann.
Unsere Projekte werden heute meistens mit Maven, Gradle oder einer Kombination aus verschiedenen Shell-Skripten gebaut. Weil aber die Komplexität der Projekte (Microservices, Cloud), die Vielfalt der eingesetzten Technologien und Programmiersprachen (Trennung Front- & Backend) sowie die Anforderungen an die erstellten Artefakte (Unterstützung mehrerer Architekturen) zugenommen hat, wollen wir Bazel als Alternative zu unseren gängigen Werkzeugen ausprobieren."
Buildah,Tools,Testen (Trial),
Debezium,Tools,Verbreiten (Adopt),"Debezium ist ein Open-Source-Projekt, welches Change Data Capture (CDC) für verschiedene Datenbanken (MySQL, PostgreSQL, MongoDB, Oracle) bereitstellt. Mit CDC können Änderungen in einer Datenbank überwacht und in Echtzeit an andere Systeme übermittelt werden. Debezium wurde entwickelt, um Integrationsprozesse zwischen Anwendungen und Datenbanken zu vereinfachen und zu automatisieren, indem es Änderungen an Datenbanken in Echtzeit erfasst und an andere Systeme weiterleitet.
Bei Inventage setzen wir Debezium vor allem zusammen mit Kafka ein, um eine Form der Outbox Pattern zu realisieren. Die Anwendungen publizieren Nachrichten nicht direkt auf Kafka, sondern speichern diese mit den restlichen Datenbankänderungen in eine speziell konfigurierte Outbox-Tabelle. Debezium erstellt uns Kafka Connectors, welche Änderungen auf dieser Outbox-Tabelle überwachen und in Echtzeit an die Kafka-Topics senden. Auf diese Weise wird die Integrität von Nachrichten sichergestellt, unsere Datenänderungen und Kafka-Nachrichten werden über die gleiche Transaktion geschrieben (oder im Fehlerfall zurückgesetzt).
Quarkus (→ Quarkus) bietet für die Konfiguration von Debezium ein eigenes Maven Modul an. So lässt sich die die Outbox Pattern in Quarkus relativ einfach konfigurieren."
Elastic Stack,Tools,Verbreiten (Adopt),"Der Elastic Stack besteht im Herz aus Elasticsearch, einem clusterfähigen und robusten Search Index ""Elasticsearch"" und dazu passenen Werkzeugen zum Sammeln, Verarbeiten und Visualiseren von Daten, sowie zum Betreiben des Clusters.
Mögliche Quellen von Daten sind z.B Applikationslogs, Servermetriken oder Umgebungssensoren. Es lassen sich aber auch ganze Dokumente oder Webseiten indizieren, um anschliessend effizient nach den Dokumenten zu suchen und finden zu können oder sie weiter zu analysieren. Basierend auf dem Index und Shard Konzept aufbauend auf Apache Lucene skaliert Elasticsearch hervorragend und kann bei Bedarf vergrössert/verkleinert werden.
Für Inventage kann fast jede Applikation einen Search Index & co gebrauchen. Entweder im effizienten Betrieb und Überwachung von Applikationen, speziell im Microservice multi-Container Umfeld. Aber auch eine Dokumentsuche über das gesammte Portal mit allen Dokumenten steigert die Produktivität der Benutzer.
ElastiStack hat sich schon in mehreren Projekten ausgezeichnet bewährt. Wir setzen ihn aktiv in der Produktion für die Dokumentensuche und für Systemüberwachung (Observability) ein."
Flyway,Tools,Verbreiten (Adopt),"Als Datenbank-Migrationstool erlaubt es Flyway, auf eine festgelegte Weise, von einem Datenbankzustand zum nächsten zu migrieren, zu jeder Zeit über den aktuellen Stand der Datenbank informiert zu sein und so auch im Bereich der Datenbank eine vergleichbar gute Kontrolle über Änderungen zu erhalten, wie man sich dies im Bereich des restlichen Applikationscodes mit Versionskontrolle, reproduzierbaren Builds und → CI/CD gewohnt ist.
Migrationen werden als SQL-Skripte implementiert. Dies erlaubt den Zugriff auf den gesamten Funktionsumfang der Datenbank und macht eine zwischengeschaltete Übersetzungsschicht (z.B. in Form von datenbankunabhängigen Änderungsdefinitionen in XML) überflüssig. Migrationsskripte in Java sind ebenfalls möglich, wurden bei Inventage aber bisher noch nicht eingesetzt.
Flyway kümmert sich darum, dass auf einem gegebenen Datenbankschema alle verfügbaren, noch nicht eingespielten Migrationsskripte in der richtigen Reihenfolge angewendet werden. Die Migration kann applikatorisch angestossen werden, wodurch sichergestellt wird, dass die Applikation immer das aktuellste Schema verwendet. Dies setzen wir bei Inventage sowohl lokal bei der Entwicklung, als auch in produktiven Systemen erfolgreich ein.
Flyway haben wir dem Ring ""Verbreiten"" zugeordnet, um auszudrücken, dass wir das Tool als gleichwertige Alternative zum ebenfalls bei Inventage eingesetzten Konkurrenten Liquibase erachten."
Grafana,Tools,Verbreiten (Adopt),
Insomnia,Tools,Verbreiten (Adopt),"Insomnia ist ein REST-API-Client, der sich gut für das Testen der RESTful Service-Schnittstelle unserer Applikationen eignet. Requests lassen sich auf einfache Weise organisieren, speichern und ausführen. Neben rein HTTP-basierten Requests werden auch SOAP, GraphQL und gRPC unterstützt. Umgebungsspezifische Daten wie Base-URLs, Authentisierungs-Tokens, Cookies etc. können in sogenannten Environments verwaltet und bei Bedarf aktiviert werden. Code-Generatoren für das Ausführen der Requests z.B. mittels cURL sind ebenfalls sehr nützlich. Die Desktop-Applikation läuft auf Linux, Mac und Windows.
Bei Inventage wird das Tool in verschiedenen Projekten als hervorragende Alternative zu Postman genutzt. Dabei wird besonders die Möglichkeit zum Exportieren vollständiger Insomnia-Workspaces geschätzt. Dieses Feature erleichtert das gemeinsame Nutzen einzelner Requests oder ganzer Test-Suiten innerhalb des Projektteams ungemein."
Jenkins,Tools,Halten (Hold),"Wir verwenden Jenkins als Build-, Continuous-Integration- und Continuous-Delivery-Server seit vielen Jahren bei einer grossen Zahl unserer Projekte. Die Plugin-Architektur von Jenkins erlaubt es, dies projekt-spezifischen Anforderung zu erfüllen. Allerdings zeigen sich die Schattenseiten dieser Architektur, wenn es zum Beispiel darum geht, Jenkins-Updates zu installieren, da veraltete Plugins oder Kompatibilitätsprobleme unter den Plugins zu etlichem Mehraufwand führen können. Alternativen sehen wir in moderneren CI/CD Plattformen wie GitLab oder GitHub Actions."
Keycloak,Tools,Verbreiten (Adopt),
kind (Kubernetes in Docker),Tools,Testen (Trial),"kind (https://kind.sigs.k8s.io/) stellt Kubernetes-Cluster als Container-Images bereit, welche bequem auf einer Docker-Umgebung (z.B. Entwicklungsrechner) gestartet werden können. Der Vorteil von kind ist ganz klar seine Leichtgewichtigkeit und kurze Startup-Zeit. Wir setzen kind bereits in einigen Projekten als ad-hoc Testcluster auf Entwicklungsrechnern ein und können so Szenarien mit verschiedenen Kubernetes Versionen schnell testen.
Die Schnelligkeit von kind macht ihn auch zu einem passenden Kandidaten, um ad-hoc Cluster in CI-Umgebungen zu starten. Dies wollen wir testen und weiter Erfahrung sammeln."
minikube,Tools,Verbreiten (Adopt),"minikube (https://minikube.sigs.k8s.io/docs/start/) stellt ähnlich wie kind Kubernetes Cluster bereit welche als Container oder alternativ auch mit einem Hypervisor gestartet werden können. Von der Usability her ähnlich einfach wie `kind` wird `minikube` sowohl als ad-hoc Testcluster als auch zur Entwicklung bei Inventage eingesetzt. Da Erfahrungsgemäss generell etwas langsamer als `kind` haben wir bisher vom Einsatz in CICD Pipelines abgesehen - das Rennen um schnelle lokale Kubernetes Test- und Enwicklungsumgebungen bleibt jedoch weiterhin spannend, siehe z.B. https://minikube.sigs.k8s.io/docs/benchmarks/timetok8s/"
Podman,Tools,Testen (Trial),
Postgres,Tools,Verbreiten (Adopt),"PostgreSQL (oder vereinfacht Postgres) ist eine (objekt-)relationale, Open Source Datenbank. Postgres bietet - im Vergleich zu rein relationalen Datenbanken (wie z.B. MySQL) - Support für benutzerdefinierte Datentypen und unterstützt standardmässig eine Vielzahl von nützlichen Datentypen - wie z.B. money für die Persistierung von Geldbeträgen. Bei Inventage schätzen wir Postgres als hochverfügbare, skalierbare und sichere Datenbank und setzen Postgres bei all jenen Projekten ein, bei welchen nicht explizit eine andren Datenbank durch den Kunden erwünscht wird."
Postman,Tools,Halten (Hold),"Ursprünglich ein Browserplugin, inzwischen eine Plattform die beim Erstellen und Testen von HTTP-APIs unterstützt. Während Postman beim einzelnen Request sehr viel komfortabler zu verwenden ist als beispielsweise curl, gestaltet sich die systematische und kollaborative Arbeit damit aufgrund der schlecht durchdachten Datenschnittstellen eher schwerfällig. So muss eine Änderung an Test-Collections explizit als JSON exportiert werden, um sie im git-Repository einchecken zu können. Weiter ist das Testformat – JavaScript – schwierig refactorbar. Strategisch setzen wir deshalb auf das vergleichbare, aber besser durchdachte Tool 'Insomnia'."
Vite,Tools,Abschätzen (Assess),"Vite ist ein Dev Server und Bundler für JavaScript und TypeScript Applikationen.
Unabhängig von der Projektgrösse, garantiert der Dev Server schnelle Ladezeiten, da nur benötigter Code ausgeliefert wird, Bundles unnötig sind und transpilierter Code zwischengespeichert wird.
Auch der Production Build kann mittels CLI gestartet werden und benötigt initial keine Konfigration. Mittels Rollup Based Plugins kann der Production Build modifiziert werden und diverse Web Frameworks unterstützt werden."
Web Dev Server,Tools,Verbreiten (Adopt),"Web Dev Server ist ein Dev Server für JavaScript Applikationen.
Unabhängig von der Projektgrösse, garantiert der Dev Server schnelle Ladezeiten, da nur benötigter Code ausgeliefert wird, Bundles unnötig sind und transpilierter Code zwischengespeichert wird.
Wir schätzen den Dev Server auf Grund seiner Leichtigkeit, Effizienz und Anpassungsfähigkeit."