{"items":[{"flag":"new","featured":true,"revisions":[{"name":"angular","release":"2023-01-31","title":"Angular","ring":"adopt","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/angular.md","body":"<p>Als etabliertes Framework zur Erstellung von Web-Applikationen hat sich <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://angular.io\">Angular</a> auch in unserem Umfeld\nbestens bewährt. Für viele Problemstellungen, die innerhalb einer Web-Applikation gelöst werden müssen, bringt Angular\npassende und durchdachte Lösungen bzw. Konzepte mit. Entwickler finden sich in unterschiedlichen Projekten schnell\nzurecht, da sie auf bekannte Muster treffen, ohne jeweils neue Library-Stacks zu erlernen. Als\n<a href=\"../libraries-frameworks-and-languages/typescript.html\">TypeScript</a>-basiertes Framework bringt Angular aufgrund der sprachlichen Vorteile gegenüber\nJavaScript-basierten Frameworks die Voraussetzung mit, auch in grösseren Projekten mit hohem Qualitätsanspruch\neingesetzt zu werden.</p>\n"}],"name":"angular","title":"Angular","ring":"adopt","quadrant":"libraries-frameworks-and-languages","body":"<p>Als etabliertes Framework zur Erstellung von Web-Applikationen hat sich <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://angular.io\">Angular</a> auch in unserem Umfeld\nbestens bewährt. Für viele Problemstellungen, die innerhalb einer Web-Applikation gelöst werden müssen, bringt Angular\npassende und durchdachte Lösungen bzw. Konzepte mit. Entwickler finden sich in unterschiedlichen Projekten schnell\nzurecht, da sie auf bekannte Muster treffen, ohne jeweils neue Library-Stacks zu erlernen. Als\n<a href=\"../libraries-frameworks-and-languages/typescript.html\">TypeScript</a>-basiertes Framework bringt Angular aufgrund der sprachlichen Vorteile gegenüber\nJavaScript-basierten Frameworks die Voraussetzung mit, auch in grösseren Projekten mit hohem Qualitätsanspruch\neingesetzt zu werden.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/angular.md"},{"flag":"new","featured":true,"revisions":[{"name":"apache-tomcat","release":"2023-01-31","title":"Apache Tomcat","ring":"hold","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/apache-tomcat.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tomcat.apache.org\">Apache Tomcat</a> ist ein robuster quelloffener Servlet Container und Webserver, den wir in einigen frühen\nProjekten zum Einsatz brachten. Mit der Verwendung von <a href=\"../libraries-frameworks-and-languages/jakarta-ee.html\">JEE</a>-Features genügte er den Anforderungen nicht mehr\nund wurde bei neueren Projekten durch Red Hat Wildfly ersetzt. Bei neuen Projekten verzichten wir nach Möglichkeit ganz\nauf konventionelle Applikationsserver, dafür setzen wir in unseren Projekten vermehrt <a href=\"../libraries-frameworks-and-languages/quarkus.html\">Quarkus</a> oder <a href=\"../libraries-frameworks-and-languages/spring-boot.html\">Spring\nBoot</a> ein.</p>\n"}],"name":"apache-tomcat","title":"Apache Tomcat","ring":"hold","quadrant":"libraries-frameworks-and-languages","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tomcat.apache.org\">Apache Tomcat</a> ist ein robuster quelloffener Servlet Container und Webserver, den wir in einigen frühen\nProjekten zum Einsatz brachten. Mit der Verwendung von <a href=\"../libraries-frameworks-and-languages/jakarta-ee.html\">JEE</a>-Features genügte er den Anforderungen nicht mehr\nund wurde bei neueren Projekten durch Red Hat Wildfly ersetzt. Bei neuen Projekten verzichten wir nach Möglichkeit ganz\nauf konventionelle Applikationsserver, dafür setzen wir in unseren Projekten vermehrt <a href=\"../libraries-frameworks-and-languages/quarkus.html\">Quarkus</a> oder <a href=\"../libraries-frameworks-and-languages/spring-boot.html\">Spring\nBoot</a> ein.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/apache-tomcat.md"},{"flag":"new","featured":true,"revisions":[{"name":"apache-wicket","release":"2023-01-31","title":"Apache Wicket","ring":"hold","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/apache-wicket.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://wicket.apache.org/\">Wicket</a> ist ein serverseitiges, komponentenbasiertes Java-Web-Framework, das von der Apache Software\nFoundation entwickelt wird. Als serverseitiges Web-Framework nutzt Wicket Ajax-Aufrufe zum Backend, um die\nUI-Komponenten dynamisch zu aktualisieren. Dadurch leidet oft die Benutzerfreundlichkeit der Web-Applikationen, da sich\nder ständige Datenaustausch mit dem Server schwerfällig anfühlt und die Möglichkeiten im UI eingeschränkter sind als bei\nmodernen, clientseitigen Frontend-Frameworks. Aufgrund der sessionbasierten Funktionsweise ist der serverseitige\nRessourcenverbrauch typischerweise höher als bei clientseitigen Frameworks, wo sich der Server auf das Bereitstellen\nschlanker REST-Services beschränkt. Dies macht Wicket gerade für Cloud-Anwendungen nicht unbedingt zur ersten Wahl.\nZudem lassen sich <a href=\"../concepts-and-methods/web-components.html\">Web Components</a> mit Wicket nicht oder nur sehr mühsam entwickeln bzw. in die\nApplikation einbinden.</p>\n<p>Bei Inventage haben wir Wicket in verschiedenen Projekten erfolgreich eingesetzt. Dennoch sind wir der Meinung,\ndass Wicket in den letzten Jahren mit der Entwicklung clientseitiger Web-Frameworks nicht mehr standhalten konnte.\nDeshalb setzen wir für neue Projekte auf <a href=\"../libraries-frameworks-and-languages/angular.html\">Angular</a> oder <a href=\"../libraries-frameworks-and-languages/lit.html\">Lit</a>.</p>\n"}],"name":"apache-wicket","title":"Apache Wicket","ring":"hold","quadrant":"libraries-frameworks-and-languages","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://wicket.apache.org/\">Wicket</a> ist ein serverseitiges, komponentenbasiertes Java-Web-Framework, das von der Apache Software\nFoundation entwickelt wird. Als serverseitiges Web-Framework nutzt Wicket Ajax-Aufrufe zum Backend, um die\nUI-Komponenten dynamisch zu aktualisieren. Dadurch leidet oft die Benutzerfreundlichkeit der Web-Applikationen, da sich\nder ständige Datenaustausch mit dem Server schwerfällig anfühlt und die Möglichkeiten im UI eingeschränkter sind als bei\nmodernen, clientseitigen Frontend-Frameworks. Aufgrund der sessionbasierten Funktionsweise ist der serverseitige\nRessourcenverbrauch typischerweise höher als bei clientseitigen Frameworks, wo sich der Server auf das Bereitstellen\nschlanker REST-Services beschränkt. Dies macht Wicket gerade für Cloud-Anwendungen nicht unbedingt zur ersten Wahl.\nZudem lassen sich <a href=\"../concepts-and-methods/web-components.html\">Web Components</a> mit Wicket nicht oder nur sehr mühsam entwickeln bzw. in die\nApplikation einbinden.</p>\n<p>Bei Inventage haben wir Wicket in verschiedenen Projekten erfolgreich eingesetzt. Dennoch sind wir der Meinung,\ndass Wicket in den letzten Jahren mit der Entwicklung clientseitiger Web-Frameworks nicht mehr standhalten konnte.\nDeshalb setzen wir für neue Projekte auf <a href=\"../libraries-frameworks-and-languages/angular.html\">Angular</a> oder <a href=\"../libraries-frameworks-and-languages/lit.html\">Lit</a>.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/apache-wicket.md"},{"flag":"new","featured":true,"revisions":[{"name":"api-first-development","release":"2023-01-31","title":"API-first Development","ring":"adopt","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/api-first-development.md","body":"<p>Beim API-first-Ansatz erfolgt der Entwurf und die Entwicklung der Schnittstelle vor deren Implementierung. Durch dieses\nVorgehen wird die Aufmerksamkeit gleich zu Beginn auf das Datenmodell und die Geschäftslogik gelenkt, was in der Regel\nzu robusteren Schnittstellen führt. Der Schnittstellenentwurf kann auch als Vertrag betrachtet werden, auf den\nverschiedene Teams parallel hinarbeiten. Dieser Aspekt spielt bei der Grösse der Projektteams innerhalb der Inventage\njedoch noch keine entscheidende Rolle.</p>\n<p>Durch den Einsatz von Codegeneratoren (z.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://openapi-generator.tech\">OpenAPI Generator</a> für\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.openapis.org\">OpenAPI</a>-Schnittstellen) kann bei Bedarf ein Gerüst für verschiedene Client- und Server-Implementierungen\n(auch in unterschiedlichen Programmiersprachen) generiert werden. Dies vermindert den Aufwand für das Schreiben von\nreinem Infrastruktur-Code. Auch wenn von dieser Möglichkeit kein Gebrauch gemacht wird, können mit geeigneten Tools\n(z.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://swagger.io/tools/swagger-ui\">Swagger-UI</a>) zu Testzwecken Clients generiert werden, mit deren Hilfe die Schnittstelle schon während\ndes Entwurfs getestet werden kann.</p>\n<p>Auch wenn mit diesem Ansatz bei Inventage gute Erfahrungen gemacht wurden und er deshalb hier zur Verbreitung empfohlen\nwird, soll seine Anwendung nicht als Zwang verstanden werden. Es steht jedem Team frei, bei rein internen APIs auch den\nCode-first-Ansatz zu wählen.</p>\n"}],"name":"api-first-development","title":"API-first Development","ring":"adopt","quadrant":"concepts-and-methods","body":"<p>Beim API-first-Ansatz erfolgt der Entwurf und die Entwicklung der Schnittstelle vor deren Implementierung. Durch dieses\nVorgehen wird die Aufmerksamkeit gleich zu Beginn auf das Datenmodell und die Geschäftslogik gelenkt, was in der Regel\nzu robusteren Schnittstellen führt. Der Schnittstellenentwurf kann auch als Vertrag betrachtet werden, auf den\nverschiedene Teams parallel hinarbeiten. Dieser Aspekt spielt bei der Grösse der Projektteams innerhalb der Inventage\njedoch noch keine entscheidende Rolle.</p>\n<p>Durch den Einsatz von Codegeneratoren (z.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://openapi-generator.tech\">OpenAPI Generator</a> für\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.openapis.org\">OpenAPI</a>-Schnittstellen) kann bei Bedarf ein Gerüst für verschiedene Client- und Server-Implementierungen\n(auch in unterschiedlichen Programmiersprachen) generiert werden. Dies vermindert den Aufwand für das Schreiben von\nreinem Infrastruktur-Code. Auch wenn von dieser Möglichkeit kein Gebrauch gemacht wird, können mit geeigneten Tools\n(z.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://swagger.io/tools/swagger-ui\">Swagger-UI</a>) zu Testzwecken Clients generiert werden, mit deren Hilfe die Schnittstelle schon während\ndes Entwurfs getestet werden kann.</p>\n<p>Auch wenn mit diesem Ansatz bei Inventage gute Erfahrungen gemacht wurden und er deshalb hier zur Verbreitung empfohlen\nwird, soll seine Anwendung nicht als Zwang verstanden werden. Es steht jedem Team frei, bei rein internen APIs auch den\nCode-first-Ansatz zu wählen.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/api-first-development.md"},{"flag":"new","featured":true,"revisions":[{"name":"architectural-decision-record-adr","release":"2023-01-31","title":"Architectural Decision Records (ADR)","ring":"assess","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/architectural-decision-record-adr.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://adr.github.io\">Architectural Decision Records</a> (ADRs) sind ein leichtgewichtiger Ansatz, um wichtige Entscheidungen zu\ndokumentieren, welche die Architektur betreffen. ADRs werden in der Regel in Markdown-Dateien neben dem Code in einem\nVersionskontrollsystem gespeichert. Sie dokumentieren den Kontext und die Konsequenzen einer Entscheidung.</p>\n<p>Bei Inventage setzen wir ADRs in einigen Projekten ein, damit sich neue Teammitglieder schneller einarbeiten können.\nDank den ADRs erübrigen sich häufig wiederkehrende Fragen, weswegen gewisse Entscheidungen getroffen worden sind, und\nentlasten dadurch das Team.</p>\n"}],"name":"architectural-decision-record-adr","title":"Architectural Decision Records (ADR)","ring":"assess","quadrant":"concepts-and-methods","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://adr.github.io\">Architectural Decision Records</a> (ADRs) sind ein leichtgewichtiger Ansatz, um wichtige Entscheidungen zu\ndokumentieren, welche die Architektur betreffen. ADRs werden in der Regel in Markdown-Dateien neben dem Code in einem\nVersionskontrollsystem gespeichert. Sie dokumentieren den Kontext und die Konsequenzen einer Entscheidung.</p>\n<p>Bei Inventage setzen wir ADRs in einigen Projekten ein, damit sich neue Teammitglieder schneller einarbeiten können.\nDank den ADRs erübrigen sich häufig wiederkehrende Fragen, weswegen gewisse Entscheidungen getroffen worden sind, und\nentlasten dadurch das Team.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/architectural-decision-record-adr.md"},{"flag":"new","featured":true,"revisions":[{"name":"archunit","release":"2023-01-31","title":"ArchUnit","ring":"adopt","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/archunit.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.archunit.org/\">ArchUnit</a> erlaubt es, die Architektur einer Software zu definieren und dann in Form von Unittests zu prüfen.\nHierbei werden insbesondere die Abhängigkeiten zwischen Modulen (Packages) gegen Verstösse gegen diese Definition\nüberprüft, sodass der Test scheitert, falls unerlaubte Referenzen eingefügt wurden.</p>\n<p>Für den Architekturstil <a href=\"../concepts-and-methods/modularized-monolith.html\">modularer Monolith</a> bietet ArchUnit ein wertvolles Werkzeug, um\nsicherzustellen, dass die Modul-Grenzen respektiert werden.</p>\n"}],"name":"archunit","title":"ArchUnit","ring":"adopt","quadrant":"libraries-frameworks-and-languages","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.archunit.org/\">ArchUnit</a> erlaubt es, die Architektur einer Software zu definieren und dann in Form von Unittests zu prüfen.\nHierbei werden insbesondere die Abhängigkeiten zwischen Modulen (Packages) gegen Verstösse gegen diese Definition\nüberprüft, sodass der Test scheitert, falls unerlaubte Referenzen eingefügt wurden.</p>\n<p>Für den Architekturstil <a href=\"../concepts-and-methods/modularized-monolith.html\">modularer Monolith</a> bietet ArchUnit ein wertvolles Werkzeug, um\nsicherzustellen, dass die Modul-Grenzen respektiert werden.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/archunit.md"},{"flag":"new","featured":true,"revisions":[{"name":"argo-cd","release":"2023-01-31","title":"Argo CD","ring":"adopt","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/argo-cd.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://argo-cd.readthedocs.io/en/stable/\">ArgoCD</a> ist ein Tool für deklarative, versionskontrollierte Deployments von Artefakten (vorgehalten in\nRepositories) für <a href=\"../platforms/kubernetes.html\">Kubernetes</a>-Umgebungen. Wir haben gute Erfahrungen in Projekten mit ArgoCD gemacht, mit\nengerer Zusammenarbeit im Deployment zwischen Dev und Ops, bzw. DevOps und mit schnelleren, kontrollierteren Deployments\nauf DEV-Umgebungen. Deshalb möchten wir dieses Tool in unseren Projekten verbreiten.</p>\n"}],"name":"argo-cd","title":"Argo CD","ring":"adopt","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://argo-cd.readthedocs.io/en/stable/\">ArgoCD</a> ist ein Tool für deklarative, versionskontrollierte Deployments von Artefakten (vorgehalten in\nRepositories) für <a href=\"../platforms/kubernetes.html\">Kubernetes</a>-Umgebungen. Wir haben gute Erfahrungen in Projekten mit ArgoCD gemacht, mit\nengerer Zusammenarbeit im Deployment zwischen Dev und Ops, bzw. DevOps und mit schnelleren, kontrollierteren Deployments\nauf DEV-Umgebungen. Deshalb möchten wir dieses Tool in unseren Projekten verbreiten.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/argo-cd.md"},{"flag":"new","featured":true,"revisions":[{"name":"artificial-intelligence","release":"2023-01-31","title":"Artificial Intelligence","ring":"assess","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/artificial-intelligence.md","body":"<p>Unter Artificial Intellgence (AI) versteht man menschliches Lernen und Denken auf Computer zu übertragen. Mit\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://openai.com/blog/gpt-3-apps/\">GPT-3</a>, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://openai.com/dall-e-2/\">DALL-E</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://stablediffusionweb.com/\">Stable Diffusion</a> wurden im letzten Jahr Deep-Learning-Modelle\nentwickelt, die bereits so ausgereift sind, dass darauf Produkte entwickelt werden können. AI wird in Zukunft mit\nSicherheit eine grosse Rolle in der Digitalisierung spielen. Als Inventage wollen wir herausfinden, was diese\nEntwicklung für uns bedeutet. Selber wollen wir keine AI Technologien entwickeln, unsere Stärken liegen in anderen\nBereichen. Wir möchten uns aber stärker mit dem Thema AI auseinandersetzen und herausfinden, was für AI-Services es auf\ndem Markt gibt und wie wir diese gewinnbringend für unsere Kunden einsetzen und in ihre Applikationen integrieren\nkönnen.</p>\n<p>Mögliche Einsätze von AI in Applikationen unserer Kunden sind:</p>\n<ul>\n<li>Recommender Systems: Systeme, die das Verhalten von Benutzern untersuchen und daraus versuchen Vorhersagen über das\nInteresse eines Benutzers für personalisierte Vorschläge zu machen.</li>\n<li>Conversational Interfaces: Chatbots sind eine Form von Conversation Interfaces. Im Gegensatz zu strukturieren Web GUIs\nkönnen Benutzer auf natürliche Weise mit dem System &quot;sprechen&quot;, was für eine verbesserte Kundenbetreuung sorgen kann.</li>\n<li>Annomalie Detection: Das System erkennt Unregelmässigkeiten automatisch und macht den Betreiber der Software darauf\naufmerksam, was zum Beispiel für die Betrugserkennung eingesetzt werden kann.</li>\n<li>Tracking: Das Kundenverhalten wird analysiert indem die Interaktion der Benutzer mit der Software aufgezeichnet wird.\nÜber AI kann aus diesem Verhalten wichtige Informationen für die Weiterentwicklung der Software oder Produkte gewonnen\nwerden.</li>\n</ul>\n"}],"name":"artificial-intelligence","title":"Artificial Intelligence","ring":"assess","quadrant":"concepts-and-methods","body":"<p>Unter Artificial Intellgence (AI) versteht man menschliches Lernen und Denken auf Computer zu übertragen. Mit\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://openai.com/blog/gpt-3-apps/\">GPT-3</a>, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://openai.com/dall-e-2/\">DALL-E</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://stablediffusionweb.com/\">Stable Diffusion</a> wurden im letzten Jahr Deep-Learning-Modelle\nentwickelt, die bereits so ausgereift sind, dass darauf Produkte entwickelt werden können. AI wird in Zukunft mit\nSicherheit eine grosse Rolle in der Digitalisierung spielen. Als Inventage wollen wir herausfinden, was diese\nEntwicklung für uns bedeutet. Selber wollen wir keine AI Technologien entwickeln, unsere Stärken liegen in anderen\nBereichen. Wir möchten uns aber stärker mit dem Thema AI auseinandersetzen und herausfinden, was für AI-Services es auf\ndem Markt gibt und wie wir diese gewinnbringend für unsere Kunden einsetzen und in ihre Applikationen integrieren\nkönnen.</p>\n<p>Mögliche Einsätze von AI in Applikationen unserer Kunden sind:</p>\n<ul>\n<li>Recommender Systems: Systeme, die das Verhalten von Benutzern untersuchen und daraus versuchen Vorhersagen über das\nInteresse eines Benutzers für personalisierte Vorschläge zu machen.</li>\n<li>Conversational Interfaces: Chatbots sind eine Form von Conversation Interfaces. Im Gegensatz zu strukturieren Web GUIs\nkönnen Benutzer auf natürliche Weise mit dem System &quot;sprechen&quot;, was für eine verbesserte Kundenbetreuung sorgen kann.</li>\n<li>Annomalie Detection: Das System erkennt Unregelmässigkeiten automatisch und macht den Betreiber der Software darauf\naufmerksam, was zum Beispiel für die Betrugserkennung eingesetzt werden kann.</li>\n<li>Tracking: Das Kundenverhalten wird analysiert indem die Interaktion der Benutzer mit der Software aufgezeichnet wird.\nÜber AI kann aus diesem Verhalten wichtige Informationen für die Weiterentwicklung der Software oder Produkte gewonnen\nwerden.</li>\n</ul>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/artificial-intelligence.md"},{"flag":"new","featured":true,"revisions":[{"name":"asdf","release":"2023-01-31","title":"asdf","ring":"adopt","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/asdf.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://asdf-vm.com/\"><code>asdf</code></a> ist ein Kommandozeilen-basiertes Werkzeug, mit dem sich die Runtime-Versionen verschiedener Tools, wie\nz.B. Node.js, Maven oder Ruby, verwalten lassen. In Projekten kann sichergestellt werden, dass alle Entwickler dieselbe\nVersion verwenden, indem in einer <code>.tool-versions</code> Datei alle Versionen der verwendeten Tools aufgelistet werden.\nDadurch werden Arbeitsprozesse vereinheitlicht, was das Arbeiten im Team vereinfacht.</p>\n"}],"name":"asdf","title":"asdf","ring":"adopt","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://asdf-vm.com/\"><code>asdf</code></a> ist ein Kommandozeilen-basiertes Werkzeug, mit dem sich die Runtime-Versionen verschiedener Tools, wie\nz.B. Node.js, Maven oder Ruby, verwalten lassen. In Projekten kann sichergestellt werden, dass alle Entwickler dieselbe\nVersion verwenden, indem in einer <code>.tool-versions</code> Datei alle Versionen der verwendeten Tools aufgelistet werden.\nDadurch werden Arbeitsprozesse vereinheitlicht, was das Arbeiten im Team vereinfacht.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/asdf.md"},{"flag":"new","featured":true,"revisions":[{"name":"automatisiertes-e2e-testing","release":"2023-01-31","title":"Automatisiertes E2E-Testing","ring":"trial","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/automatisiertes-e2e-testing.md","body":"<p>Unter End-to-End-Tests versteht man das Prüfen der gesamten Applikation — vom Frontend bis zum Backend. Die Anwendung\nwird aus Endnutzerperspektive anhand produktionsähnlichen Bedingungen und Daten auf Funktionalität und Leistung\ngetestet. Ziel ist es, zu simulieren, wie ein reales Benutzerszenario von Anfang bis Ende aussieht. Damit wird\nsichergestellt, dass sich der Anwendungsfluss wie erwartet verhält. Im Vergleich zum manuellen Testing erfordern\nE2E-Test keine geschulten Tester. Alle Tests werden automatisiert und wiederholt ausgeführt, inklusive angebundener\nBackend-Dienste und externer Schnittstellen (wobei diese unter Umständen gemockt werden).</p>\n<p>Um die Applikation automatisiert zu testen, verwenden wir <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://gauge.org/\">Gauge</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://taiko.dev/\">Taiko</a>. Beides sind\nOpen-Source-Frameworks mit einer einfachen API zur Automatisierung von Test in Chromium-basierten Browsern (Chrome,\nMicrosoft Edge, Opera) und Firefox. Gauge-Tests werden in Markdown geschrieben, was das Schreiben und Warten von Tests\nerleichtert.</p>\n"}],"name":"automatisiertes-e2e-testing","title":"Automatisiertes E2E-Testing","ring":"trial","quadrant":"concepts-and-methods","body":"<p>Unter End-to-End-Tests versteht man das Prüfen der gesamten Applikation — vom Frontend bis zum Backend. Die Anwendung\nwird aus Endnutzerperspektive anhand produktionsähnlichen Bedingungen und Daten auf Funktionalität und Leistung\ngetestet. Ziel ist es, zu simulieren, wie ein reales Benutzerszenario von Anfang bis Ende aussieht. Damit wird\nsichergestellt, dass sich der Anwendungsfluss wie erwartet verhält. Im Vergleich zum manuellen Testing erfordern\nE2E-Test keine geschulten Tester. Alle Tests werden automatisiert und wiederholt ausgeführt, inklusive angebundener\nBackend-Dienste und externer Schnittstellen (wobei diese unter Umständen gemockt werden).</p>\n<p>Um die Applikation automatisiert zu testen, verwenden wir <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://gauge.org/\">Gauge</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://taiko.dev/\">Taiko</a>. Beides sind\nOpen-Source-Frameworks mit einer einfachen API zur Automatisierung von Test in Chromium-basierten Browsern (Chrome,\nMicrosoft Edge, Opera) und Firefox. Gauge-Tests werden in Markdown geschrieben, was das Schreiben und Warten von Tests\nerleichtert.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/automatisiertes-e2e-testing.md"},{"flag":"new","featured":true,"revisions":[{"name":"bazel","release":"2023-01-31","title":"Bazel","ring":"assess","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/bazel.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bazel.build/\">Bazel</a> ist ein von Google entwickeltes, quelloffenes Build-Werkzeug, das mit komplexen Projekten, in denen\nverschiedene Sprachen und Plattformen eingesetzt werden, gut und effizient umgehen kann.</p>\n<p>Unsere Projekte werden heute meistens mit Maven, Gradle oder einer Kombination aus verschiedenen Shell-Skripten gebaut.\nWeil aber die Komplexität der Projekte (<a href=\"../concepts-and-methods/microservice-architektur.html\">Microservices</a>, Cloud), die Vielfalt der eingesetzten\nTechnologien und Programmiersprachen (Trennung Front- &amp; Backend) sowie die Anforderungen an die erstellten Artefakte\n(Unterstützung mehrerer Architekturen) zugenommen hat, möchten wir Bazel als Alternative zu unseren gängigen Werkzeugen\nausprobieren.</p>\n"}],"name":"bazel","title":"Bazel","ring":"assess","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bazel.build/\">Bazel</a> ist ein von Google entwickeltes, quelloffenes Build-Werkzeug, das mit komplexen Projekten, in denen\nverschiedene Sprachen und Plattformen eingesetzt werden, gut und effizient umgehen kann.</p>\n<p>Unsere Projekte werden heute meistens mit Maven, Gradle oder einer Kombination aus verschiedenen Shell-Skripten gebaut.\nWeil aber die Komplexität der Projekte (<a href=\"../concepts-and-methods/microservice-architektur.html\">Microservices</a>, Cloud), die Vielfalt der eingesetzten\nTechnologien und Programmiersprachen (Trennung Front- &amp; Backend) sowie die Anforderungen an die erstellten Artefakte\n(Unterstützung mehrerer Architekturen) zugenommen hat, möchten wir Bazel als Alternative zu unseren gängigen Werkzeugen\nausprobieren.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/bazel.md"},{"flag":"new","featured":true,"revisions":[{"name":"buildah","release":"2023-01-31","title":"Buildah","ring":"trial","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/buildah.md","body":"<p>Mit <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buildah.io\">Buildah</a> können Container-Images erstellt, verwaltet und bearbeitet werden. Es ermöglicht dem Benutzer,\nImages ohne die Verwendung eines Daemons zu erstellen und bietet eine Alternative zu anderen Tools wie Docker und\n<a href=\"../tools/podman.html\">Podman</a>. Buildah kann Container-Images in verschiedenen Formaten erstellen, wie z.B. OCI und Docker. Es erlaubt\neine feine Kontrolle über den Erstellungsprozess und kann mit anderen Container-Tools und Orchestrierungsplattformen\nintegriert werden.</p>\n"}],"name":"buildah","title":"Buildah","ring":"trial","quadrant":"tools","body":"<p>Mit <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buildah.io\">Buildah</a> können Container-Images erstellt, verwaltet und bearbeitet werden. Es ermöglicht dem Benutzer,\nImages ohne die Verwendung eines Daemons zu erstellen und bietet eine Alternative zu anderen Tools wie Docker und\n<a href=\"../tools/podman.html\">Podman</a>. Buildah kann Container-Images in verschiedenen Formaten erstellen, wie z.B. OCI und Docker. Es erlaubt\neine feine Kontrolle über den Erstellungsprozess und kann mit anderen Container-Tools und Orchestrierungsplattformen\nintegriert werden.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/buildah.md"},{"flag":"new","featured":true,"revisions":[{"name":"buildless-web-development","release":"2023-01-31","title":"Buildless Web Development","ring":"trial","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/buildless-web-development.md","body":"<p>Viele der heutigen Web-Development-Tools sind entstanden, weil die Entwicklung der Webbrowser derjenigen der Sprachen\nhinterherhinkte. Heute sieht die Situation anders aus und moderne Browser unterstützen die meisten modernen\nSprachfeatures.</p>\n<p>Wir sind überzeugt, dass Web-Entwickler als Erstes die Plattform und deren APIs kennen müssen — noch vor allen\nFrameworks, die ohnehin auf dieser Plattform aufbauen. Insbesondere bei der Entwicklung kann für viele Arbeitsabläufe\nauf die Browserfunktionalität zurückgegriffen werden. So werden die nicht unbedingt notwendigen Transformationsschritte\nweggelassen. Beim Programmcode werden moderne Sprachfeatures verwendet, weil sie direkt vom Browser interpretiert werden\nkönnen. </p>\n<p>Uns ist bewusst, dass es heute für produktive Releases in der Regel nicht ohne einen klassischen &quot;Build&quot; geht. Speziell\ndann, wenn unser Programmcode eine Vielzahl von Devices unterstützen und nicht nur in modernen Browsern\nlauffähig sein muss. Wir hoffen, es ist nur eine Frage der Zeit, bis sich die Browser-Landschaft so weit modernisiert,\ndass in Zukunft immer weniger Arbeitsschritte benötigt werden, um modernen Programmcode einer noch breiteren Masse\nzugänglich zu machen.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://modern-web.dev/guides/going-buildless/getting-started/\">Going Buildless</a><br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://modern-web.dev/guides/dev-server/getting-started/\">Dev Server: Getting Started</a></p>\n"}],"name":"buildless-web-development","title":"Buildless Web Development","ring":"trial","quadrant":"concepts-and-methods","body":"<p>Viele der heutigen Web-Development-Tools sind entstanden, weil die Entwicklung der Webbrowser derjenigen der Sprachen\nhinterherhinkte. Heute sieht die Situation anders aus und moderne Browser unterstützen die meisten modernen\nSprachfeatures.</p>\n<p>Wir sind überzeugt, dass Web-Entwickler als Erstes die Plattform und deren APIs kennen müssen — noch vor allen\nFrameworks, die ohnehin auf dieser Plattform aufbauen. Insbesondere bei der Entwicklung kann für viele Arbeitsabläufe\nauf die Browserfunktionalität zurückgegriffen werden. So werden die nicht unbedingt notwendigen Transformationsschritte\nweggelassen. Beim Programmcode werden moderne Sprachfeatures verwendet, weil sie direkt vom Browser interpretiert werden\nkönnen. </p>\n<p>Uns ist bewusst, dass es heute für produktive Releases in der Regel nicht ohne einen klassischen &quot;Build&quot; geht. Speziell\ndann, wenn unser Programmcode eine Vielzahl von Devices unterstützen und nicht nur in modernen Browsern\nlauffähig sein muss. Wir hoffen, es ist nur eine Frage der Zeit, bis sich die Browser-Landschaft so weit modernisiert,\ndass in Zukunft immer weniger Arbeitsschritte benötigt werden, um modernen Programmcode einer noch breiteren Masse\nzugänglich zu machen.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://modern-web.dev/guides/going-buildless/getting-started/\">Going Buildless</a><br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://modern-web.dev/guides/dev-server/getting-started/\">Dev Server: Getting Started</a></p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/buildless-web-development.md"},{"flag":"new","featured":true,"revisions":[{"name":"ci-cd","release":"2023-01-31","title":"CI/CD","ring":"adopt","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/ci-cd.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.redhat.com/de/topics/devops/what-is-ci-cd\">CI/CD</a> — Continuous Integration und Continuous Delivery — sind Methodiken des Software-Engineering bei denen\nCodeänderungen am Produkt mit möglichst kleiner Verzögerung und kleinem manuellem Aufwand gebaut, getestet und zu einem\nProdukt zusammengefügt (<em>integrated</em>) als auch in einem geeigneten Format ausgeliefert (<em>delivery</em>) werden. Ein weiterer\nSchritt ist das automatisierte (ggf. auf Knopfdruck) Installieren der Software auf dem Zielsystem (<em>Continuous\nDeployment</em>).</p>\n<p>Die Methodik trägt massgeblich zur Qualität von Software bei, da Probleme unmittelbar sichtbar werden. Sie ermöglicht\nschnellere Entwicklungszyklen, da Änderungen am Code bereits kurze Zeit später auf Testumgebungen von den Benutzern\ngetestet, sowie im Erfolgsfall umgehend auf einer produktiven Umgebung installiert werden können.</p>\n<p>Inventage setzt stark auf CI/CD und strebt zunehmend die vollständige Automatisierung des kompletten Release-Zyklus an.\nNeuere Projekte setzen dies in der Regel bereits um. Wir erreichen dies durch Einsatz geeigneter Tools, wie bislang dem\nJenkins Buildserver, sowie zunehmend Container-basierter Buildsysteme, wie z.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/features/actions\">GitHub Actions</a> oder <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://about.gitlab.com/topics/ci-cd/\">Gitlab\nCI/CD</a>.</p>\n"}],"name":"ci-cd","title":"CI/CD","ring":"adopt","quadrant":"concepts-and-methods","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.redhat.com/de/topics/devops/what-is-ci-cd\">CI/CD</a> — Continuous Integration und Continuous Delivery — sind Methodiken des Software-Engineering bei denen\nCodeänderungen am Produkt mit möglichst kleiner Verzögerung und kleinem manuellem Aufwand gebaut, getestet und zu einem\nProdukt zusammengefügt (<em>integrated</em>) als auch in einem geeigneten Format ausgeliefert (<em>delivery</em>) werden. Ein weiterer\nSchritt ist das automatisierte (ggf. auf Knopfdruck) Installieren der Software auf dem Zielsystem (<em>Continuous\nDeployment</em>).</p>\n<p>Die Methodik trägt massgeblich zur Qualität von Software bei, da Probleme unmittelbar sichtbar werden. Sie ermöglicht\nschnellere Entwicklungszyklen, da Änderungen am Code bereits kurze Zeit später auf Testumgebungen von den Benutzern\ngetestet, sowie im Erfolgsfall umgehend auf einer produktiven Umgebung installiert werden können.</p>\n<p>Inventage setzt stark auf CI/CD und strebt zunehmend die vollständige Automatisierung des kompletten Release-Zyklus an.\nNeuere Projekte setzen dies in der Regel bereits um. Wir erreichen dies durch Einsatz geeigneter Tools, wie bislang dem\nJenkins Buildserver, sowie zunehmend Container-basierter Buildsysteme, wie z.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/features/actions\">GitHub Actions</a> oder <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://about.gitlab.com/topics/ci-cd/\">Gitlab\nCI/CD</a>.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/ci-cd.md"},{"flag":"new","featured":true,"revisions":[{"name":"codequaliät","release":"2023-01-31","title":"Codequaliät","ring":"adopt","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/codequaliät.md","body":"<p>Erfolgreiche Software zeichnet sich nicht nur durch ihre Funktionalität oder die Anzahl Features aus, sondern soll auch\neine hohe Codequalität vorweisen. Code mit hoher Qualität ist <strong>weniger fehleranfällig</strong> und erfordert dadurch weniger\nFehlerbehebung, was Zeit und Geld spart. Die Software läuft <strong>zuverlässiger</strong> mit weniger Ausfällen, wovon sowohl die\nBenutzer als auch die Kunden profitieren. Gut strukturierter Code ist <strong>wartbarer</strong> und lässt sich leichter\n<strong>erweitern</strong> und <strong>skalieren</strong>, was für wachsende Anforderungen unverzichtbar ist. Gut lesbarer Code lässt sich\neinfacher verstehen und erleichtert dadurch die Zusammenarbeit im <strong>Team</strong>. Nicht zuletzt steigert eine hohe\nCodequalität auch die <strong>Sicherheit</strong> der Software.</p>\n<p>Zur Gewährleistung einer hohen Codequalität verwenden wir statische Code-Analyse-Tools (z.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://checkstyle.github.io\">Checkstyle</a>,\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://spotbugs.github.io/\">SpotBugs</a>, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://pmd.github.io/\">PMD</a>, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hadolint.github.io/hadolint/\">Hadolint</a>, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://eslint.org/\">ESLint</a>), die uns dabei unterstützen den Code nach\nmöglichen Fehlern und Problemen zu untersuchen und uns auf Best Practices aufmerksam machen. Mittels Unittests stellen\nwir sicher, dass der Programmcode korrekt funktioniert und dass Änderungen nicht unbeabsichtigt negative Auswirkungen\nhaben. Sowohl statische Code-Analyse-Tools als auch Unittests unterstützen uns bei der Entwicklung direkt aus der IDE\nheraus und werden zusätzlich bei jedem Build ausgeführt, um frühzeitig auf allfällige Fehler und Probleme hinzuweisen.</p>\n<p>Die Nachvollziehbarkeit von Code-Änderungen wird über die Versionsverwaltung <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://git-scm.com/\">Git</a> sichergestellt. Änderungen,\nwelche für die Produktion bestimmt sind, werden mittels <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.atlassian.com/git/tutorials/making-a-pull-request\">Pull Requests</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.atlassian.com/agile/software-development/code-reviews\">Code-Reviews</a>\ndiskutiert, bevor sie appliziert werden.</p>\n"}],"name":"codequaliät","title":"Codequaliät","ring":"adopt","quadrant":"concepts-and-methods","body":"<p>Erfolgreiche Software zeichnet sich nicht nur durch ihre Funktionalität oder die Anzahl Features aus, sondern soll auch\neine hohe Codequalität vorweisen. Code mit hoher Qualität ist <strong>weniger fehleranfällig</strong> und erfordert dadurch weniger\nFehlerbehebung, was Zeit und Geld spart. Die Software läuft <strong>zuverlässiger</strong> mit weniger Ausfällen, wovon sowohl die\nBenutzer als auch die Kunden profitieren. Gut strukturierter Code ist <strong>wartbarer</strong> und lässt sich leichter\n<strong>erweitern</strong> und <strong>skalieren</strong>, was für wachsende Anforderungen unverzichtbar ist. Gut lesbarer Code lässt sich\neinfacher verstehen und erleichtert dadurch die Zusammenarbeit im <strong>Team</strong>. Nicht zuletzt steigert eine hohe\nCodequalität auch die <strong>Sicherheit</strong> der Software.</p>\n<p>Zur Gewährleistung einer hohen Codequalität verwenden wir statische Code-Analyse-Tools (z.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://checkstyle.github.io\">Checkstyle</a>,\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://spotbugs.github.io/\">SpotBugs</a>, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://pmd.github.io/\">PMD</a>, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hadolint.github.io/hadolint/\">Hadolint</a>, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://eslint.org/\">ESLint</a>), die uns dabei unterstützen den Code nach\nmöglichen Fehlern und Problemen zu untersuchen und uns auf Best Practices aufmerksam machen. Mittels Unittests stellen\nwir sicher, dass der Programmcode korrekt funktioniert und dass Änderungen nicht unbeabsichtigt negative Auswirkungen\nhaben. Sowohl statische Code-Analyse-Tools als auch Unittests unterstützen uns bei der Entwicklung direkt aus der IDE\nheraus und werden zusätzlich bei jedem Build ausgeführt, um frühzeitig auf allfällige Fehler und Probleme hinzuweisen.</p>\n<p>Die Nachvollziehbarkeit von Code-Änderungen wird über die Versionsverwaltung <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://git-scm.com/\">Git</a> sichergestellt. Änderungen,\nwelche für die Produktion bestimmt sind, werden mittels <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.atlassian.com/git/tutorials/making-a-pull-request\">Pull Requests</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.atlassian.com/agile/software-development/code-reviews\">Code-Reviews</a>\ndiskutiert, bevor sie appliziert werden.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/codequaliät.md"},{"flag":"new","featured":true,"revisions":[{"name":"ddd","release":"2023-01-31","title":"DDD","ring":"trial","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/ddd.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://martinfowler.com/tags/domain%20driven%20design.html\">Domain Driven Design</a> (DDD) hilft bei der Implementierung von Fachapplikationen. Zentral ist dabei die Verwendung\neiner einheitlichen und präzisen Sprache für die Beschreibung von Abstraktionen (Modellen) zwischen Entwicklern und\nFachpersonen. Es wird zwischen einem taktischen und einem strategischen Teil unterschieden. Der taktische Teil behandelt\ndie verschiedenen Verantwortlichkeiten (Stereotypen / Building Blocks) der Klassen. In Kombination mit einer\nPackage-Struktur gemäss hexagonaler / Onion Architektur ergibt sich daraus eine klar nachvollziehbare und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://livebook.manning.com/book/effective-software-testing/chapter-7/137\">leicht zu\ntestende Implementierung</a>. Der strategische Teil bietet Konzepte für die Abgrenzung und Integration mehrerer\nBereiche untereinander und dient damit vor allem der Architekturstufe.</p>\n<p>Bei Inventage haben wir DDD (taktisch und strategisch) erfolgreich in mehreren Projekten eingesetzt. Bei Projekten für\nFachbereiche sehen wir in DDD den grössten Nutzen. Aus diesem Grund empfehlen wir DDD in weiteren Projekten einzusetzen\nund zu testen. Die Lernkurve für DDD ist leider aufgrund der aktuell verfügbaren Literatur noch etwas holprig.</p>\n"}],"name":"ddd","title":"DDD","ring":"trial","quadrant":"concepts-and-methods","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://martinfowler.com/tags/domain%20driven%20design.html\">Domain Driven Design</a> (DDD) hilft bei der Implementierung von Fachapplikationen. Zentral ist dabei die Verwendung\neiner einheitlichen und präzisen Sprache für die Beschreibung von Abstraktionen (Modellen) zwischen Entwicklern und\nFachpersonen. Es wird zwischen einem taktischen und einem strategischen Teil unterschieden. Der taktische Teil behandelt\ndie verschiedenen Verantwortlichkeiten (Stereotypen / Building Blocks) der Klassen. In Kombination mit einer\nPackage-Struktur gemäss hexagonaler / Onion Architektur ergibt sich daraus eine klar nachvollziehbare und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://livebook.manning.com/book/effective-software-testing/chapter-7/137\">leicht zu\ntestende Implementierung</a>. Der strategische Teil bietet Konzepte für die Abgrenzung und Integration mehrerer\nBereiche untereinander und dient damit vor allem der Architekturstufe.</p>\n<p>Bei Inventage haben wir DDD (taktisch und strategisch) erfolgreich in mehreren Projekten eingesetzt. Bei Projekten für\nFachbereiche sehen wir in DDD den grössten Nutzen. Aus diesem Grund empfehlen wir DDD in weiteren Projekten einzusetzen\nund zu testen. Die Lernkurve für DDD ist leider aufgrund der aktuell verfügbaren Literatur noch etwas holprig.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/ddd.md"},{"flag":"new","featured":true,"revisions":[{"name":"debezium","release":"2023-01-31","title":"Debezium","ring":"adopt","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/debezium.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://debezium.io/\">Debezium</a> ist ein Open-Source-Projekt, das <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Change_data_capture\">Change Data Capture</a> (CDC) für verschiedene Datenbanken\n(z.B. MySQL, <a href=\"../tools/postgresql.html\">PostgreSQL</a>, MongoDB, Oracle) bereitstellt. Mit CDC werden Daten-Änderungen in einer Datenbank\nin Echtzeit erfasst und an andere Systeme weitergeleitet. Dadurch können Integrationsprozesse zwischen Anwendungen und\nDatenbanken vereinfacht und automatisiert werden.</p>\n<p>Bei Inventage setzen wir Debezium vor allem zusammen mit <a href=\"../platforms/kafka.html\">Kafka</a> ein, um eine Form des <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/design-microservices-architecture-with-patterns/outbox-pattern-for-microservices-architectures-1b8648dfaa27\">Outbox\nPatterns</a> zu realisieren. Die Anwendungen publizieren Nachrichten nicht direkt auf Kafka, sondern\nspeichern diese mit den restlichen Datenbankänderungen in eine speziell konfigurierte Outbox-Tabelle. Debezium erstellt\nuns Kafka-Connectors, welche Änderungen auf dieser Outbox-Tabelle überwachen und in Echtzeit an die Kafka-Topics senden.\nAuf diese Weise wird die Integrität der Nachrichten sichergestellt, da sowohl unsere Datenänderungen als auch\nKafka-Nachrichten in der gleichen Transaktion geschrieben (oder im Fehlerfall zurückgesetzt) werden.</p>\n<p><a href=\"../libraries-frameworks-and-languages/quarkus.html\">Quarkus</a> bietet für die Konfiguration von Debezium ein eigenes <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://debezium.io/documentation/reference/stable/integrations/outbox.html\">Maven Modul</a> an. So lässt\nsich das Outbox Pattern in Quarkus relativ einfach konfigurieren.</p>\n"}],"name":"debezium","title":"Debezium","ring":"adopt","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://debezium.io/\">Debezium</a> ist ein Open-Source-Projekt, das <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Change_data_capture\">Change Data Capture</a> (CDC) für verschiedene Datenbanken\n(z.B. MySQL, <a href=\"../tools/postgresql.html\">PostgreSQL</a>, MongoDB, Oracle) bereitstellt. Mit CDC werden Daten-Änderungen in einer Datenbank\nin Echtzeit erfasst und an andere Systeme weitergeleitet. Dadurch können Integrationsprozesse zwischen Anwendungen und\nDatenbanken vereinfacht und automatisiert werden.</p>\n<p>Bei Inventage setzen wir Debezium vor allem zusammen mit <a href=\"../platforms/kafka.html\">Kafka</a> ein, um eine Form des <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/design-microservices-architecture-with-patterns/outbox-pattern-for-microservices-architectures-1b8648dfaa27\">Outbox\nPatterns</a> zu realisieren. Die Anwendungen publizieren Nachrichten nicht direkt auf Kafka, sondern\nspeichern diese mit den restlichen Datenbankänderungen in eine speziell konfigurierte Outbox-Tabelle. Debezium erstellt\nuns Kafka-Connectors, welche Änderungen auf dieser Outbox-Tabelle überwachen und in Echtzeit an die Kafka-Topics senden.\nAuf diese Weise wird die Integrität der Nachrichten sichergestellt, da sowohl unsere Datenänderungen als auch\nKafka-Nachrichten in der gleichen Transaktion geschrieben (oder im Fehlerfall zurückgesetzt) werden.</p>\n<p><a href=\"../libraries-frameworks-and-languages/quarkus.html\">Quarkus</a> bietet für die Konfiguration von Debezium ein eigenes <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://debezium.io/documentation/reference/stable/integrations/outbox.html\">Maven Modul</a> an. So lässt\nsich das Outbox Pattern in Quarkus relativ einfach konfigurieren.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/debezium.md"},{"flag":"new","featured":true,"revisions":[{"name":"deno","release":"2023-01-31","title":"Deno","ring":"assess","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/deno.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://deno.land/\">Deno</a> ist eine Laufzeitumgebung für <a href=\"../libraries-frameworks-and-languages/javascript.html\">JavaScript</a> und <a href=\"../libraries-frameworks-and-languages/typescript.html\">TypeScript</a>. APIs orientieren sich\nan Browser-Standards. Somit kann derselbe Code sowohl im Browser als auch in Deno ausgeführt werden. Diverse APIs sind\nstandardmässig deaktiviert, um unerlaubte Nutzungen und Zugriffe zu verhindern. Mittels Node.js Compability Mode können\nauch Node.js Applikationen ausgeführt werden. Deno kann als Fundament für Task Runner, Utility Script und Web Services\ngenutzt werden und hat das Potenzial <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://nodejs.org/de/about/\">Node.js</a> abzulösen.</p>\n"}],"name":"deno","title":"Deno","ring":"assess","quadrant":"libraries-frameworks-and-languages","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://deno.land/\">Deno</a> ist eine Laufzeitumgebung für <a href=\"../libraries-frameworks-and-languages/javascript.html\">JavaScript</a> und <a href=\"../libraries-frameworks-and-languages/typescript.html\">TypeScript</a>. APIs orientieren sich\nan Browser-Standards. Somit kann derselbe Code sowohl im Browser als auch in Deno ausgeführt werden. Diverse APIs sind\nstandardmässig deaktiviert, um unerlaubte Nutzungen und Zugriffe zu verhindern. Mittels Node.js Compability Mode können\nauch Node.js Applikationen ausgeführt werden. Deno kann als Fundament für Task Runner, Utility Script und Web Services\ngenutzt werden und hat das Potenzial <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://nodejs.org/de/about/\">Node.js</a> abzulösen.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/deno.md"},{"flag":"new","featured":true,"revisions":[{"name":"design-tokens","release":"2023-01-31","title":"Design Tokens","ring":"assess","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/design-tokens.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.designtokens.org/\">Design Tokens</a> bilden die Basis von <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.robertcreative.com/blog/what-is-a-design-system\">Design-Systemen</a>. Mit ihrer Hilfe werden\nDesignentscheidungen benannt, gespeichert und verteilt, sodass sie in verschiedenen Design-Tools und Programmiersprachen\nverwendet werden können. Sie ermöglichen Produkte mit einer konsistenten UI-Sprache für verschiedene Systemen und unter\nEinbezug vieler Stakeholder zu bauen.</p>\n<p>Vorläufer von Design Tokens werden in fast allen unseren Projekten primär im CSS als\nVariablen abgebildet. Hier unterscheiden wir zwischen Kompilierzeitvariablen (SASS-Variablen) und Laufzeitvariablen (CSS\nCustom Properties). Viele unsere Projekte sind mandantenfähig. In solchen Systemen sind primär die Laufzeitvariablen\ninteressant, weil sie eine Anpassung des Produkts direkt im Browser und ohne einen Build ermöglichen. Damit wird das\nTheming eines Produkts vereinfacht.</p>\n<p>Obwohl nicht jedes Projekt die nötige Grösse hat, um dazu gleich auch ein Design-System zu bauen, möchten wir in Zukunft\nnoch mehr Erfahrung mit solchen Laufzeitkonfigurationen mithilfe von Design Tokens sammeln. Wo möglich und sinnvoll, im\nRahmen eines eigenen oder bestehenden Design-Systems.</p>\n"}],"name":"design-tokens","title":"Design Tokens","ring":"assess","quadrant":"concepts-and-methods","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.designtokens.org/\">Design Tokens</a> bilden die Basis von <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.robertcreative.com/blog/what-is-a-design-system\">Design-Systemen</a>. Mit ihrer Hilfe werden\nDesignentscheidungen benannt, gespeichert und verteilt, sodass sie in verschiedenen Design-Tools und Programmiersprachen\nverwendet werden können. Sie ermöglichen Produkte mit einer konsistenten UI-Sprache für verschiedene Systemen und unter\nEinbezug vieler Stakeholder zu bauen.</p>\n<p>Vorläufer von Design Tokens werden in fast allen unseren Projekten primär im CSS als\nVariablen abgebildet. Hier unterscheiden wir zwischen Kompilierzeitvariablen (SASS-Variablen) und Laufzeitvariablen (CSS\nCustom Properties). Viele unsere Projekte sind mandantenfähig. In solchen Systemen sind primär die Laufzeitvariablen\ninteressant, weil sie eine Anpassung des Produkts direkt im Browser und ohne einen Build ermöglichen. Damit wird das\nTheming eines Produkts vereinfacht.</p>\n<p>Obwohl nicht jedes Projekt die nötige Grösse hat, um dazu gleich auch ein Design-System zu bauen, möchten wir in Zukunft\nnoch mehr Erfahrung mit solchen Laufzeitkonfigurationen mithilfe von Design Tokens sammeln. Wo möglich und sinnvoll, im\nRahmen eines eigenen oder bestehenden Design-Systems.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/design-tokens.md"},{"flag":"new","featured":true,"revisions":[{"name":"elastic-stack","release":"2023-01-31","title":"Elastic Stack","ring":"adopt","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/elastic-stack.md","body":"<p>Der <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.elastic.co/de/\">Elastic Stack</a> besteht im Herz aus dem clusterfähigen und robusten Suchindex\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.elastic.co/de/elasticsearch/\">Elasticsearch</a> und dazu passenden Werkzeugen zum Sammeln, Verarbeiten und Visualisieren von Daten,\nsowie zum Betreiben des Clusters.</p>\n<p>Mögliche Quellen von Daten sind z.B. Applikationslogs, Servermetriken oder Umgebungssensoren. Es lassen sich aber auch\nganze Dokumente oder Webseiten indizieren, um anschliessend effizient nach den Dokumenten zu suchen oder sie weiter zu\nanalysieren. Basierend auf dem Index und Shard-Konzept von Apache Lucene skaliert Elasticsearch hervorragend und kann\nbei Bedarf vergrössert bzw. verkleinert werden.</p>\n<p>Für Inventage kann fast jede Applikation einen Suchindex gebrauchen. Entweder im effizienten Betrieb und Überwachung von\nApplikationen, speziell im Microservice Multi-Container-Umfeld. Aber auch eine Dokumentsuche über ein gesamtes Portal\nmit allen Dokumenten steigert die Produktivität der Benutzer. </p>\n<p>Elastic Stack hat sich in mehreren Projekten ausgezeichnet bewährt. Wir setzen ihn produktiv für die Dokumentensuche und\ndie Systemüberwachung (Observability) ein.</p>\n"}],"name":"elastic-stack","title":"Elastic Stack","ring":"adopt","quadrant":"tools","body":"<p>Der <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.elastic.co/de/\">Elastic Stack</a> besteht im Herz aus dem clusterfähigen und robusten Suchindex\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.elastic.co/de/elasticsearch/\">Elasticsearch</a> und dazu passenden Werkzeugen zum Sammeln, Verarbeiten und Visualisieren von Daten,\nsowie zum Betreiben des Clusters.</p>\n<p>Mögliche Quellen von Daten sind z.B. Applikationslogs, Servermetriken oder Umgebungssensoren. Es lassen sich aber auch\nganze Dokumente oder Webseiten indizieren, um anschliessend effizient nach den Dokumenten zu suchen oder sie weiter zu\nanalysieren. Basierend auf dem Index und Shard-Konzept von Apache Lucene skaliert Elasticsearch hervorragend und kann\nbei Bedarf vergrössert bzw. verkleinert werden.</p>\n<p>Für Inventage kann fast jede Applikation einen Suchindex gebrauchen. Entweder im effizienten Betrieb und Überwachung von\nApplikationen, speziell im Microservice Multi-Container-Umfeld. Aber auch eine Dokumentsuche über ein gesamtes Portal\nmit allen Dokumenten steigert die Produktivität der Benutzer. </p>\n<p>Elastic Stack hat sich in mehreren Projekten ausgezeichnet bewährt. Wir setzen ihn produktiv für die Dokumentensuche und\ndie Systemüberwachung (Observability) ein.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/elastic-stack.md"},{"flag":"new","featured":true,"revisions":[{"name":"flyway","release":"2023-01-31","title":"Flyway","ring":"adopt","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/flyway.md","body":"<p>Als Datenbank-Migrationstool kümmert sich <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://flywaydb.org/\">Flyway</a> um das Einspielen von Migrationsskripten, sodass ein\ngegebenes Datenbankschema automatisch auf den aktuellsten Stand gebracht wird. Die Migration kann applikatorisch\nangestossen werden, was sichergestellt, dass eine Applikation immer das aktuellste Schema verwendet. </p>\n<p>Migrationen werden als SQL-Skripte implementiert. Dies erlaubt den Zugriff auf den gesamten Funktionsumfang der\neingesetzten Datenbank und macht eine zwischengeschaltete Übersetzungsschicht (z.B. in Form von datenbankunabhängigen\nÄnderungsdefinitionen in XML) überflüssig. Migrationsskripte in Java sind ebenfalls möglich, wurden bei Inventage aber\nbisher nicht eingesetzt. Die Migrationsskripte werden zusammen mit dem Applikationscode gepflegt, wodurch man auch im\nBereich der Datenbank eine gute Kontrolle über Änderungen erhält, wie man es sich im Bereich des restlichen\nApplikationscodes mit Versionskontrolle, reproduzierbaren Builds und <a href=\"../concepts-and-methods/ci-cd.html\">CI/CD</a> gewohnt ist. </p>\n<p>Bei Inventage setzen wir Flyway sowohl lokal während der Entwicklung, als auch in produktiven Systemen erfolgreich ein.</p>\n"}],"name":"flyway","title":"Flyway","ring":"adopt","quadrant":"tools","body":"<p>Als Datenbank-Migrationstool kümmert sich <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://flywaydb.org/\">Flyway</a> um das Einspielen von Migrationsskripten, sodass ein\ngegebenes Datenbankschema automatisch auf den aktuellsten Stand gebracht wird. Die Migration kann applikatorisch\nangestossen werden, was sichergestellt, dass eine Applikation immer das aktuellste Schema verwendet. </p>\n<p>Migrationen werden als SQL-Skripte implementiert. Dies erlaubt den Zugriff auf den gesamten Funktionsumfang der\neingesetzten Datenbank und macht eine zwischengeschaltete Übersetzungsschicht (z.B. in Form von datenbankunabhängigen\nÄnderungsdefinitionen in XML) überflüssig. Migrationsskripte in Java sind ebenfalls möglich, wurden bei Inventage aber\nbisher nicht eingesetzt. Die Migrationsskripte werden zusammen mit dem Applikationscode gepflegt, wodurch man auch im\nBereich der Datenbank eine gute Kontrolle über Änderungen erhält, wie man es sich im Bereich des restlichen\nApplikationscodes mit Versionskontrolle, reproduzierbaren Builds und <a href=\"../concepts-and-methods/ci-cd.html\">CI/CD</a> gewohnt ist. </p>\n<p>Bei Inventage setzen wir Flyway sowohl lokal während der Entwicklung, als auch in produktiven Systemen erfolgreich ein.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/flyway.md"},{"flag":"new","featured":true,"revisions":[{"name":"graalvm","release":"2023-01-31","title":"GraalVM","ring":"assess","quadrant":"platforms","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/graalvm.md","body":"<p>Als Alternative zur Java Virtual Machine (JVM) lassen sich mit <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.graalvm.org/\">GraalVM</a> performante Applikationen mit\nniedrigem Ressourcenbedarf erstellen. GraalVM ist Polyglot. Das heisst es lassen sich Applikationen schreiben, welche\nBibliotheken verwenden, die auch in anderen Sprachen (z.B. Javascript, R, Ruby, Python) geschrieben sind. Da auf GraalVM\noptimierte Applikationen wenig Ressourcen benötigen, ist die GraalVM eine ideale Plattform für Cloud-Applikationen.</p>\n<p><a href=\"../libraries-frameworks-and-languages/quarkus.html\">Quarkus</a>-Applikationen lassen sich auch für die GraalVM bauen. Bei Inventage möchten wir herausfinden, ob sich\ndie GraalVM in der Praxis bewährt, ob der Zusatzaufwand für einen GraalVM-Build gerechtfertigt ist, und ob wir die\nPolyglossie der GraalVM zu unserem Vorteil nutzen können.</p>\n"}],"name":"graalvm","title":"GraalVM","ring":"assess","quadrant":"platforms","body":"<p>Als Alternative zur Java Virtual Machine (JVM) lassen sich mit <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.graalvm.org/\">GraalVM</a> performante Applikationen mit\nniedrigem Ressourcenbedarf erstellen. GraalVM ist Polyglot. Das heisst es lassen sich Applikationen schreiben, welche\nBibliotheken verwenden, die auch in anderen Sprachen (z.B. Javascript, R, Ruby, Python) geschrieben sind. Da auf GraalVM\noptimierte Applikationen wenig Ressourcen benötigen, ist die GraalVM eine ideale Plattform für Cloud-Applikationen.</p>\n<p><a href=\"../libraries-frameworks-and-languages/quarkus.html\">Quarkus</a>-Applikationen lassen sich auch für die GraalVM bauen. Bei Inventage möchten wir herausfinden, ob sich\ndie GraalVM in der Praxis bewährt, ob der Zusatzaufwand für einen GraalVM-Build gerechtfertigt ist, und ob wir die\nPolyglossie der GraalVM zu unserem Vorteil nutzen können.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/graalvm.md"},{"flag":"new","featured":true,"revisions":[{"name":"grafana","release":"2023-01-31","title":"Grafana","ring":"adopt","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/grafana.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://grafana.com/grafana/\">Grafana</a> ist ein leistungsstarkes Dashboard- und Analysewerkzeug für Zeitreihendaten. Es ermöglicht die\nErstellung von interaktiven Dashboards, welche Daten aus verschiedenen Quellen wie <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://prometheus.io\">Prometheus</a>,\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.influxdata.com\">InfluxDB</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.elastic.co\">Elasticsearch</a> aggregieren und visualisieren.</p>\n<p>Gerade bei <a href=\"../concepts-and-methods/microservice-architektur.html\">Microservices</a> ist es zunehmend wichtig, eine grosse Anzahl von Messpunkten sinnvoll\nverarbeiten und auswerten zu können. Die stetig wachsende Produktpalette rund um Grafana (\nz.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://grafana.com/oss/loki/\">Grafana Loki</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://grafana.com/traces/\">Grafana Tempo</a>) erlauben zudem eine immer tiefere Integration und\nbessere Korrelation der Daten über mehrere Services hinweg.</p>\n"}],"name":"grafana","title":"Grafana","ring":"adopt","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://grafana.com/grafana/\">Grafana</a> ist ein leistungsstarkes Dashboard- und Analysewerkzeug für Zeitreihendaten. Es ermöglicht die\nErstellung von interaktiven Dashboards, welche Daten aus verschiedenen Quellen wie <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://prometheus.io\">Prometheus</a>,\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.influxdata.com\">InfluxDB</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.elastic.co\">Elasticsearch</a> aggregieren und visualisieren.</p>\n<p>Gerade bei <a href=\"../concepts-and-methods/microservice-architektur.html\">Microservices</a> ist es zunehmend wichtig, eine grosse Anzahl von Messpunkten sinnvoll\nverarbeiten und auswerten zu können. Die stetig wachsende Produktpalette rund um Grafana (\nz.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://grafana.com/oss/loki/\">Grafana Loki</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://grafana.com/traces/\">Grafana Tempo</a>) erlauben zudem eine immer tiefere Integration und\nbessere Korrelation der Daten über mehrere Services hinweg.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/grafana.md"},{"flag":"new","featured":true,"revisions":[{"name":"graphql","release":"2023-01-31","title":"GraphQL","ring":"adopt","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/graphql.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://graphql.org/\">GraphQL</a> ist eine Schnittstelle für den lesenden und schreibenden Datenzugriff über das HTTP-Protokoll. Es\nstellt eine Alternative zu REST dar und bietet gegenüber diesem den Vorteil, dass die Datentiefe und -breite bei einem\nAufruf gesteuert werden kann.</p>\n<p>Wir haben beim Einsatz von GraphQL einen grossen Gewinn an Flexibilität bei der Entwicklung feststellen können. Sei es\ndurch eine weniger starke Kopplung zwischen Datenproduzent und -konsument oder bei der Nutzung der gleichen Daten von\nunterschiedlichen Datenkonsumenten. Daneben führt die Verwendung von GraphQL zu einer effizienten Datenverarbeitung und\n-transfer, da nur die benötigten Daten bereitgestellt und übertragen werden müssen.</p>\n<p>Aufgrund unserer Erfahrungen bei mehrfachen Projekteinsätzen können wir die breite Verwendung von GraphQL stärkstens\nempfehlen. Zur Unterstützung setzen wir häufig <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hasura.io/\">Hasura</a> ein. Es ist ein quelloffenes Werkzeug für die\nBereitstellung einer GraphQL-Fassade vor bestehende Datenspeicher.</p>\n"}],"name":"graphql","title":"GraphQL","ring":"adopt","quadrant":"concepts-and-methods","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://graphql.org/\">GraphQL</a> ist eine Schnittstelle für den lesenden und schreibenden Datenzugriff über das HTTP-Protokoll. Es\nstellt eine Alternative zu REST dar und bietet gegenüber diesem den Vorteil, dass die Datentiefe und -breite bei einem\nAufruf gesteuert werden kann.</p>\n<p>Wir haben beim Einsatz von GraphQL einen grossen Gewinn an Flexibilität bei der Entwicklung feststellen können. Sei es\ndurch eine weniger starke Kopplung zwischen Datenproduzent und -konsument oder bei der Nutzung der gleichen Daten von\nunterschiedlichen Datenkonsumenten. Daneben führt die Verwendung von GraphQL zu einer effizienten Datenverarbeitung und\n-transfer, da nur die benötigten Daten bereitgestellt und übertragen werden müssen.</p>\n<p>Aufgrund unserer Erfahrungen bei mehrfachen Projekteinsätzen können wir die breite Verwendung von GraphQL stärkstens\nempfehlen. Zur Unterstützung setzen wir häufig <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hasura.io/\">Hasura</a> ein. Es ist ein quelloffenes Werkzeug für die\nBereitstellung einer GraphQL-Fassade vor bestehende Datenspeicher.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/graphql.md"},{"flag":"new","featured":true,"revisions":[{"name":"guice","release":"2023-01-31","title":"Guice","ring":"hold","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/guice.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/google/guice/\">Guice</a> ist eine einfache Dependency Injection Library, die ohne viel Aufwand in ein Java-Projekt eingebunden\nwerden kann. In den meisten modernen Frameworks und Plattformen ist ein Dependency Injection Framework bereits\nvorhanden, das meist mächtiger und ausgereifter ist als Guice (z.B. CDI oder Spring). Falls kein solches Framework\neingesetzt wird, kann Guice nach wie vor eingesetzt werden.</p>\n"}],"name":"guice","title":"Guice","ring":"hold","quadrant":"libraries-frameworks-and-languages","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/google/guice/\">Guice</a> ist eine einfache Dependency Injection Library, die ohne viel Aufwand in ein Java-Projekt eingebunden\nwerden kann. In den meisten modernen Frameworks und Plattformen ist ein Dependency Injection Framework bereits\nvorhanden, das meist mächtiger und ausgereifter ist als Guice (z.B. CDI oder Spring). Falls kein solches Framework\neingesetzt wird, kann Guice nach wie vor eingesetzt werden.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/guice.md"},{"flag":"new","featured":true,"revisions":[{"name":"hybride-mobile-applikationen","release":"2023-01-31","title":"Hybride Mobile Applikationen","ring":"trial","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/hybride-mobile-applikationen.md","body":"<p>Immer wieder sind wir bei unseren Kundenprojekten mit Anfragen für mobile Applikationen konfrontiert. Eine der\nwichtigsten Anforderungen ist dabei oft eine Applikation im jeweiligen Store der wichtigsten Anbieter. Native Mobile\nApps gehören allerdings nicht zu unserem Service-Portfolio.</p>\n<p>Im Web bieten sich Progressive Web Apps (PWAs) an, um &quot;App-like&quot; Benutzererlebnisse zu bauen. Obwohl solche\nApplikationen heute grundsätzlich in den App-Stores publiziert werden können, ist die Unterstützung der Features nicht\nbei allen Anbietern gleich gut und der Publikations- und Update-Prozess nicht ganz trivial.</p>\n<p>Um den Kundenanforderungen gerecht zu werden und gleichzeitig den Technologiefokus im Web zu behalten, haben wir bereits\nErfahrungen mit <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.brightsolutions.de/blog/native-vs-hybride-vs-web-app/\">hybriden mobilen Applikationen</a> sammeln können. Es sind schlanke\nWrapper-Applikationen, die nativ in der jeweiligen Programmiersprache (Swift für iOS und Kotlin für Android) geschrieben\nwerden und als Inhalt die Web-Applikation über WebViews einbinden. Das hat den Vorteil, dass man Apps jeweils über die\nplattformspezifischen, nativen Mechanismen publizieren kann, ihr Inhalt aber trotzdem als responsive Web-Applikation\numsetzen kann. Updates an den Apps in den Stores müssen nur selten eingegeben werden, weil jeweils die neueste Version\nder Inhalte aus dem Web geladen wird. Zudem sind Erweiterungen und Integrationen der Web-Version mit der nativen Welt\ngrundsätzlich möglich.</p>\n"}],"name":"hybride-mobile-applikationen","title":"Hybride Mobile Applikationen","ring":"trial","quadrant":"concepts-and-methods","body":"<p>Immer wieder sind wir bei unseren Kundenprojekten mit Anfragen für mobile Applikationen konfrontiert. Eine der\nwichtigsten Anforderungen ist dabei oft eine Applikation im jeweiligen Store der wichtigsten Anbieter. Native Mobile\nApps gehören allerdings nicht zu unserem Service-Portfolio.</p>\n<p>Im Web bieten sich Progressive Web Apps (PWAs) an, um &quot;App-like&quot; Benutzererlebnisse zu bauen. Obwohl solche\nApplikationen heute grundsätzlich in den App-Stores publiziert werden können, ist die Unterstützung der Features nicht\nbei allen Anbietern gleich gut und der Publikations- und Update-Prozess nicht ganz trivial.</p>\n<p>Um den Kundenanforderungen gerecht zu werden und gleichzeitig den Technologiefokus im Web zu behalten, haben wir bereits\nErfahrungen mit <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.brightsolutions.de/blog/native-vs-hybride-vs-web-app/\">hybriden mobilen Applikationen</a> sammeln können. Es sind schlanke\nWrapper-Applikationen, die nativ in der jeweiligen Programmiersprache (Swift für iOS und Kotlin für Android) geschrieben\nwerden und als Inhalt die Web-Applikation über WebViews einbinden. Das hat den Vorteil, dass man Apps jeweils über die\nplattformspezifischen, nativen Mechanismen publizieren kann, ihr Inhalt aber trotzdem als responsive Web-Applikation\numsetzen kann. Updates an den Apps in den Stores müssen nur selten eingegeben werden, weil jeweils die neueste Version\nder Inhalte aus dem Web geladen wird. Zudem sind Erweiterungen und Integrationen der Web-Version mit der nativen Welt\ngrundsätzlich möglich.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/hybride-mobile-applikationen.md"},{"flag":"new","featured":true,"revisions":[{"name":"infrastructure-as-code","release":"2023-01-31","title":"Infrastructure as Code","ring":"adopt","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/infrastructure-as-code.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac\">Infrastructure as Code</a> (IaC) ist ein Konzept mit dem Ziel, die Bereitstellung und das Management von\nInfrastrukturkomponenten (Server, Cluster, etc.) in Code abzubilden und durch automatisierte Prozesse auszuführen. Durch\ndie Versionierung vom Code in Git sind alle Änderungen an der Infrastruktur protokolliert und verhindern so das\nAufkommen von Configuration Drift und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://martinfowler.com/bliki/SnowflakeServer.html\">Snowflake-Systemen</a>. Durch Automatisierung und entsprechendes Tooling\n(z.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.terraform.io/\">Terraform</a>) können Best Practices wie Testing oder <a href=\"../concepts-and-methods/ci-cd.html\">CI/CD</a> aus der Software-Entwicklung auch auf\nInfrastrukturkomponenten angewendet werden. Unserer Erfahrung nach können mit IaC und Terraform neue Umgebungen\nschneller und reproduzierbarer bereitgestellt werden.</p>\n"}],"name":"infrastructure-as-code","title":"Infrastructure as Code","ring":"adopt","quadrant":"concepts-and-methods","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac\">Infrastructure as Code</a> (IaC) ist ein Konzept mit dem Ziel, die Bereitstellung und das Management von\nInfrastrukturkomponenten (Server, Cluster, etc.) in Code abzubilden und durch automatisierte Prozesse auszuführen. Durch\ndie Versionierung vom Code in Git sind alle Änderungen an der Infrastruktur protokolliert und verhindern so das\nAufkommen von Configuration Drift und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://martinfowler.com/bliki/SnowflakeServer.html\">Snowflake-Systemen</a>. Durch Automatisierung und entsprechendes Tooling\n(z.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.terraform.io/\">Terraform</a>) können Best Practices wie Testing oder <a href=\"../concepts-and-methods/ci-cd.html\">CI/CD</a> aus der Software-Entwicklung auch auf\nInfrastrukturkomponenten angewendet werden. Unserer Erfahrung nach können mit IaC und Terraform neue Umgebungen\nschneller und reproduzierbarer bereitgestellt werden.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/infrastructure-as-code.md"},{"flag":"new","featured":true,"revisions":[{"name":"insomnia","release":"2023-01-31","title":"Insomnia","ring":"adopt","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/insomnia.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://insomnia.rest/\">Insomnia</a> ist ein REST-API-Client, der sich zum Testen von RESTful Service-Schnittstellen eignet. Requests\nlassen sich auf einfache Weise organisieren, speichern und ausführen. Neben rein HTTP-basierten Requests werden auch\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.w3.org/TR/SOAP\">SOAP</a>, <a href=\"../concepts-and-methods/graphql.html\">GraphQL</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://grpc.io/\">gRPC</a> unterstützt. Umgebungsspezifische Daten wie Base-URLs,\nAuthentisierungs-Tokens, Cookies etc. können in sogenannten Environments verwaltet und bei Bedarf aktiviert werden.\nCode-Generatoren für das Ausführen der Requests, z.B. mittels <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://curl.se/\">cURL</a>, sind ebenfalls nützlich. Die\nDesktop-Applikation läuft auf Linux, Mac und Windows.</p>\n<p>Bei Inventage wird das Tool in verschiedenen Projekten als hervorragende Alternative zu <a href=\"../tools/postman.html\">Postman</a> genutzt.\nDabei wird besonders die Möglichkeit zum Exportieren vollständiger Insomnia-Workspaces geschätzt. Dieses Feature\nerleichtert das gemeinsame Nutzen einzelner Requests oder ganzer Test-Suiten innerhalb des Projektteams.</p>\n"}],"name":"insomnia","title":"Insomnia","ring":"adopt","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://insomnia.rest/\">Insomnia</a> ist ein REST-API-Client, der sich zum Testen von RESTful Service-Schnittstellen eignet. Requests\nlassen sich auf einfache Weise organisieren, speichern und ausführen. Neben rein HTTP-basierten Requests werden auch\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.w3.org/TR/SOAP\">SOAP</a>, <a href=\"../concepts-and-methods/graphql.html\">GraphQL</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://grpc.io/\">gRPC</a> unterstützt. Umgebungsspezifische Daten wie Base-URLs,\nAuthentisierungs-Tokens, Cookies etc. können in sogenannten Environments verwaltet und bei Bedarf aktiviert werden.\nCode-Generatoren für das Ausführen der Requests, z.B. mittels <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://curl.se/\">cURL</a>, sind ebenfalls nützlich. Die\nDesktop-Applikation läuft auf Linux, Mac und Windows.</p>\n<p>Bei Inventage wird das Tool in verschiedenen Projekten als hervorragende Alternative zu <a href=\"../tools/postman.html\">Postman</a> genutzt.\nDabei wird besonders die Möglichkeit zum Exportieren vollständiger Insomnia-Workspaces geschätzt. Dieses Feature\nerleichtert das gemeinsame Nutzen einzelner Requests oder ganzer Test-Suiten innerhalb des Projektteams.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/insomnia.md"},{"flag":"new","featured":true,"revisions":[{"name":"jakarta-ee","release":"2023-01-31","title":"Jakarta EE","ring":"hold","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/jakarta-ee.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/\">Jakarta EE</a>, ehemals <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://javaee.github.io/\">Java EE</a>, ist eine Sammlung von Java-Technologien und Spezifikationen,\nwelche für die Entwicklung von Unternehmensanwendungen verwendet werden. Unter anderem enthält Jakarta EE Technologien\nwie <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/servlet/\">Servlets</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/pages/\">Jakarta Server Pages</a> (JSP) für die Erstellung von Web-Anwendungen, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/enterprise-beans/\">Jakarta\nEnterprise Beans</a> (EJB) für die Verwaltung von Geschäftslogik und Transaktionen, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/persistence/\">Jakarta Persistence API</a>\n(JPA) für die Verwaltung von Datenbankzugriffen, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/cdi/\">Contexts and Dependency Injection</a> (CDI) für die Organisation von\nAnwendungskomponenten und ihren Abhängigkeiten, sowie <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/restful-ws/\">Jakarta RESTful Web Services</a> (JAX-RS) für HTTP-basierte\nSchnittstellen.</p>\n<p>Jakarta EE-Applikationen werden normalerweise in einem Applikationsserver ausgeführt, der den Applikationen die von der\nSpezifikation definierten Dienste bereitstellt (z.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.wildfly.org/\">WildFly</a> oder <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://glassfish.org/\">GlassFish</a>). Durch ihren\nrelativ hohen Ressourcenverbrauch sind solche Applikationsserver allerdings weniger gut geeignet, um als\nCloud-Applikationen installiert zu werden.</p>\n<p>Bei Inventage setzen wir deshalb vermehrt auf <a href=\"../libraries-frameworks-and-languages/quarkus.html\">Quarkus</a> und möchten uns von den traditionellen\nApplikationsserverumgebungen lösen. Quarkus-Applikationen können dieselben bewährten Technologien und Spezifikationen\nverwenden wie von Jakarta EE vorgegeben, verfügen aber über eine deutlich schnellere Startzeit, sind\nressourceneffizienter und enthalten Unterstützung für Cloud-native Funktionen.</p>\n"}],"name":"jakarta-ee","title":"Jakarta EE","ring":"hold","quadrant":"libraries-frameworks-and-languages","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/\">Jakarta EE</a>, ehemals <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://javaee.github.io/\">Java EE</a>, ist eine Sammlung von Java-Technologien und Spezifikationen,\nwelche für die Entwicklung von Unternehmensanwendungen verwendet werden. Unter anderem enthält Jakarta EE Technologien\nwie <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/servlet/\">Servlets</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/pages/\">Jakarta Server Pages</a> (JSP) für die Erstellung von Web-Anwendungen, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/enterprise-beans/\">Jakarta\nEnterprise Beans</a> (EJB) für die Verwaltung von Geschäftslogik und Transaktionen, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/persistence/\">Jakarta Persistence API</a>\n(JPA) für die Verwaltung von Datenbankzugriffen, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/cdi/\">Contexts and Dependency Injection</a> (CDI) für die Organisation von\nAnwendungskomponenten und ihren Abhängigkeiten, sowie <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakarta.ee/specifications/restful-ws/\">Jakarta RESTful Web Services</a> (JAX-RS) für HTTP-basierte\nSchnittstellen.</p>\n<p>Jakarta EE-Applikationen werden normalerweise in einem Applikationsserver ausgeführt, der den Applikationen die von der\nSpezifikation definierten Dienste bereitstellt (z.B. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.wildfly.org/\">WildFly</a> oder <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://glassfish.org/\">GlassFish</a>). Durch ihren\nrelativ hohen Ressourcenverbrauch sind solche Applikationsserver allerdings weniger gut geeignet, um als\nCloud-Applikationen installiert zu werden.</p>\n<p>Bei Inventage setzen wir deshalb vermehrt auf <a href=\"../libraries-frameworks-and-languages/quarkus.html\">Quarkus</a> und möchten uns von den traditionellen\nApplikationsserverumgebungen lösen. Quarkus-Applikationen können dieselben bewährten Technologien und Spezifikationen\nverwenden wie von Jakarta EE vorgegeben, verfügen aber über eine deutlich schnellere Startzeit, sind\nressourceneffizienter und enthalten Unterstützung für Cloud-native Funktionen.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/jakarta-ee.md"},{"flag":"new","featured":true,"revisions":[{"name":"javascript","release":"2023-01-31","title":"JavaScript","ring":"hold","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/javascript.md","body":"<p>Die fehlende Typisierung der Sprache erschwert das Refactoring einer <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.javascript.com/\">JavaScript</a>-Codebasis. Dieser Umstand\nschlägt sich schliesslich negativ auf die Wartbarkeit und die Codequalität einer Applikation nieder. Stattdessen setzen\nwir für grössere (Frontend-) Projekte auf <a href=\"../libraries-frameworks-and-languages/typescript.html\">TypeScript</a>, womit sich eine hohe Codequalität auch auf\nlange Sicht effizient sicherstellen lässt.</p>\n"}],"name":"javascript","title":"JavaScript","ring":"hold","quadrant":"libraries-frameworks-and-languages","body":"<p>Die fehlende Typisierung der Sprache erschwert das Refactoring einer <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.javascript.com/\">JavaScript</a>-Codebasis. Dieser Umstand\nschlägt sich schliesslich negativ auf die Wartbarkeit und die Codequalität einer Applikation nieder. Stattdessen setzen\nwir für grössere (Frontend-) Projekte auf <a href=\"../libraries-frameworks-and-languages/typescript.html\">TypeScript</a>, womit sich eine hohe Codequalität auch auf\nlange Sicht effizient sicherstellen lässt.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/javascript.md"},{"flag":"new","featured":true,"revisions":[{"name":"jenkins","release":"2023-01-31","title":"Jenkins","ring":"hold","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/jenkins.md","body":"<p>Bei Inventage verwenden wir <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.jenkins.io/\">Jenkins</a> als Build-, <a href=\"../concepts-and-methods/ci-cd.html\">Continuous-Integration- und\nContinuous-Delivery</a>-Server. Die Plugin-Architektur von Jenkins erlaubt es, projektspezifische Anforderungen zu\nerfüllen. Allerdings zeigen sich die Schattenseiten dieser Architektur, wenn es zum Beispiel darum geht, Jenkins-Updates\nzu installieren, da veraltete Plugins oder Kompatibilitätsprobleme unter den Plugins zu etlichem Mehraufwand führen\nkönnen. Alternativen sehen wir in moderneren CI/CD-Plattformen wie GitLab oder GitHub Actions.</p>\n"}],"name":"jenkins","title":"Jenkins","ring":"hold","quadrant":"tools","body":"<p>Bei Inventage verwenden wir <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.jenkins.io/\">Jenkins</a> als Build-, <a href=\"../concepts-and-methods/ci-cd.html\">Continuous-Integration- und\nContinuous-Delivery</a>-Server. Die Plugin-Architektur von Jenkins erlaubt es, projektspezifische Anforderungen zu\nerfüllen. Allerdings zeigen sich die Schattenseiten dieser Architektur, wenn es zum Beispiel darum geht, Jenkins-Updates\nzu installieren, da veraltete Plugins oder Kompatibilitätsprobleme unter den Plugins zu etlichem Mehraufwand führen\nkönnen. Alternativen sehen wir in moderneren CI/CD-Plattformen wie GitLab oder GitHub Actions.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/jenkins.md"},{"flag":"new","featured":true,"revisions":[{"name":"jooq","release":"2023-01-31","title":"jOOQ","ring":"trial","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/jooq.md","body":"<p>JPA und Hibernate sind De-facto-Standards für Datenbank-Zugriffe in Java, auch bei Inventage. Mit steigender Komplexität\nvon Datenbankabfragen wächst aber auch die Schwierigkeit beim Formulieren derselben in der zur Verfügung stehenden\nCriteria API. Greift man auf Native Queries zurück, verliert man die Typsicherheit.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.jooq.org/\">jOOQ</a> (Java Object Oriented Querying) bietet eine Java DSL, die sehr eng an SQL angelehnt ist und auch\nherstellerspezifische SQL-Statements unterstützt. So können Datenbank-Abfragen typsicher und direkt in Java formuliert\nwerden.</p>\n<p>Bisher wurde jOOQ bei Inventage noch in keinem Projekt eingesetzt. Erste Evaluationen waren jedoch vielversprechend,\nsodass wir uns entschieden haben, diese Library dem Ring &quot;Testen&quot; zuzuordnen und auch einmal in einem Projekt\neinzusetzen, um mehr Erfahrung damit zu sammeln. Ein mögliches Vorgehen könnte sein, jOOQ für komplexere Reporting- und\nBatch-Processing-Tasks zu verwenden, während die typischen CRUD-Tasks weiterhin mit JPA als OR-Mapper umgesetzt werden.</p>\n"}],"name":"jooq","title":"jOOQ","ring":"trial","quadrant":"libraries-frameworks-and-languages","body":"<p>JPA und Hibernate sind De-facto-Standards für Datenbank-Zugriffe in Java, auch bei Inventage. Mit steigender Komplexität\nvon Datenbankabfragen wächst aber auch die Schwierigkeit beim Formulieren derselben in der zur Verfügung stehenden\nCriteria API. Greift man auf Native Queries zurück, verliert man die Typsicherheit.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.jooq.org/\">jOOQ</a> (Java Object Oriented Querying) bietet eine Java DSL, die sehr eng an SQL angelehnt ist und auch\nherstellerspezifische SQL-Statements unterstützt. So können Datenbank-Abfragen typsicher und direkt in Java formuliert\nwerden.</p>\n<p>Bisher wurde jOOQ bei Inventage noch in keinem Projekt eingesetzt. Erste Evaluationen waren jedoch vielversprechend,\nsodass wir uns entschieden haben, diese Library dem Ring &quot;Testen&quot; zuzuordnen und auch einmal in einem Projekt\neinzusetzen, um mehr Erfahrung damit zu sammeln. Ein mögliches Vorgehen könnte sein, jOOQ für komplexere Reporting- und\nBatch-Processing-Tasks zu verwenden, während die typischen CRUD-Tasks weiterhin mit JPA als OR-Mapper umgesetzt werden.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/jooq.md"},{"flag":"new","featured":true,"revisions":[{"name":"kafka","release":"2023-01-31","title":"Kafka","ring":"adopt","quadrant":"platforms","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/kafka.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://kafka.apache.org/\">Apache Kafka</a> ist eine quelloffene Event Streaming Plattform, die in den letzten Jahren viel Popularität erlangt\nhat. Wir verwenden Kafka bei unseren <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://uniport.ch/\">Uniport</a>-Projekten und realisieren damit Anwendungsfälle wie asynchrone\nKommunikation zwischen Microservices oder die Implementierung des <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://microservices.io/patterns/data/transactional-outbox.html\">Transactional Outbox</a> Patterns\nmittels <a href=\"../tools/debezium.html\">Debezium</a>. Die Architektur von Kafka unterscheidet sich von klassischen Message Brokern (z.B.\nRabbitMQ). Kafka ist ein persistenter Message Bus, der Events (Messages) in einer geordneten Sequenz vorhält. Events\nkönnen dadurch mehrfach gelesen werden, womit sich Kafka auch für die Realisierung von weiteren\nMicroservicer-Architektur-Patterns wie z.B. Event-Sourcing eignet.</p>\n"}],"name":"kafka","title":"Kafka","ring":"adopt","quadrant":"platforms","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://kafka.apache.org/\">Apache Kafka</a> ist eine quelloffene Event Streaming Plattform, die in den letzten Jahren viel Popularität erlangt\nhat. Wir verwenden Kafka bei unseren <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://uniport.ch/\">Uniport</a>-Projekten und realisieren damit Anwendungsfälle wie asynchrone\nKommunikation zwischen Microservices oder die Implementierung des <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://microservices.io/patterns/data/transactional-outbox.html\">Transactional Outbox</a> Patterns\nmittels <a href=\"../tools/debezium.html\">Debezium</a>. Die Architektur von Kafka unterscheidet sich von klassischen Message Brokern (z.B.\nRabbitMQ). Kafka ist ein persistenter Message Bus, der Events (Messages) in einer geordneten Sequenz vorhält. Events\nkönnen dadurch mehrfach gelesen werden, womit sich Kafka auch für die Realisierung von weiteren\nMicroservicer-Architektur-Patterns wie z.B. Event-Sourcing eignet.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/kafka.md"},{"flag":"new","featured":true,"revisions":[{"name":"keycloak","release":"2023-01-31","title":"Keycloak","ring":"adopt","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/keycloak.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.keycloak.org/\">Keycloak</a> ist eine quelloffene Identity &amp; Access Management (IAM) Lösung. Aufgrund unserer Überzeugung von\nKeycloak haben wir das <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://keycloak.ch/\">Keycloak Compentence Center Switzerland</a> gegründet und bieten selber vielerlei\nDienstleistungen rund um Keycloak an.</p>\n<p>Keycloak ist eine sehr flexible IAM Plattform mit weitreichenden Möglichkeiten zur Anpassung (konfigurativ oder über\neigene Erweiterungen). Der Open-Source-Code wird durch die grosse Community laufend auf dem neusten Stand gehalten und\nunterstützt so z.B. dank der Basis auf <a href=\"../libraries-frameworks-and-languages/quarkus.html\">Quarkus</a> auch perfekt den Einsatz in Cloud-Umgebungen. Bei Inventage\nsetzen wir Keycloak selber in vielen Projekten ein. Für erste Schritte mit Keycloak empfehlen wir unser\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://keycloak.ch/keycloak-tutorials/tutorial-custom-keycloak/\">Tutorial</a> auf <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://keycloak.ch/\">keycloak.ch</a>.</p>\n"}],"name":"keycloak","title":"Keycloak","ring":"adopt","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.keycloak.org/\">Keycloak</a> ist eine quelloffene Identity &amp; Access Management (IAM) Lösung. Aufgrund unserer Überzeugung von\nKeycloak haben wir das <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://keycloak.ch/\">Keycloak Compentence Center Switzerland</a> gegründet und bieten selber vielerlei\nDienstleistungen rund um Keycloak an.</p>\n<p>Keycloak ist eine sehr flexible IAM Plattform mit weitreichenden Möglichkeiten zur Anpassung (konfigurativ oder über\neigene Erweiterungen). Der Open-Source-Code wird durch die grosse Community laufend auf dem neusten Stand gehalten und\nunterstützt so z.B. dank der Basis auf <a href=\"../libraries-frameworks-and-languages/quarkus.html\">Quarkus</a> auch perfekt den Einsatz in Cloud-Umgebungen. Bei Inventage\nsetzen wir Keycloak selber in vielen Projekten ein. Für erste Schritte mit Keycloak empfehlen wir unser\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://keycloak.ch/keycloak-tutorials/tutorial-custom-keycloak/\">Tutorial</a> auf <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://keycloak.ch/\">keycloak.ch</a>.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/keycloak.md"},{"flag":"new","featured":true,"revisions":[{"name":"kind","release":"2023-01-31","title":"kind","ring":"trial","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/kind.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://kind.sigs.k8s.io/\">kind</a> (Kubernetes in Docker) stellt <a href=\"../platforms/kubernetes.html\">Kubernetes</a>-Cluster als Container-Images bereit, die bequem in\neiner Docker-Umgebung (z.B. Entwicklungsrechner) gestartet werden können. Der Vorteil von kind ist seine\nLeichtgewichtigkeit und kurze Startzeit. Wir setzen kind bereits in einigen Projekten als Ad-hoc-Testcluster auf\nEntwicklungsrechnern ein und können so schnell Szenarien mit verschiedenen Kubernetes-Versionen testen. Die\nSchnelligkeit von kind macht ihn auch zu einem passenden Kandidaten, um Ad-hoc-Cluster in <a href=\"../concepts-and-methods/ci-cd.html\">CI-Umgebungen</a> zu\nstarten.</p>\n"}],"name":"kind","title":"kind","ring":"trial","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://kind.sigs.k8s.io/\">kind</a> (Kubernetes in Docker) stellt <a href=\"../platforms/kubernetes.html\">Kubernetes</a>-Cluster als Container-Images bereit, die bequem in\neiner Docker-Umgebung (z.B. Entwicklungsrechner) gestartet werden können. Der Vorteil von kind ist seine\nLeichtgewichtigkeit und kurze Startzeit. Wir setzen kind bereits in einigen Projekten als Ad-hoc-Testcluster auf\nEntwicklungsrechnern ein und können so schnell Szenarien mit verschiedenen Kubernetes-Versionen testen. Die\nSchnelligkeit von kind macht ihn auch zu einem passenden Kandidaten, um Ad-hoc-Cluster in <a href=\"../concepts-and-methods/ci-cd.html\">CI-Umgebungen</a> zu\nstarten.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/kind.md"},{"flag":"new","featured":true,"revisions":[{"name":"kotlin","release":"2023-01-31","title":"Kotlin","ring":"trial","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/kotlin.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://kotlinlang.org\">Kotlin</a> ist eine statisch typisierte Programmiersprache, die Konzepte aus der objektorientierten und der\nfunktionalen Programmierung vereint, und viele moderne Sprachfeatures mitbringt. Kotlin-Code wird vom Compiler in\nBytecode für die JVM übersetzt [1], wobei eine grösstmögliche Interoperabilität [2] beider Sprachen gewährleistet wird.\nDadurch lassen sich in Kotlin Java-Libraries und -Frameworks problemlos weiterverwenden, womit bestehendes Knowhow für\nden Java-Programmierer keinesfalls obsolet wird. Diese Interoperabilität erlaubt auch die Integration von Kotlin in\nbestehende Java-Projekte, womit sich Applikationen schrittweise modernisieren lassen.</p>\n<p>Java als Plattform, auf die wir auch in Zukunft setzen möchten, hat sich für Enterprise-Applikationen über viele Jahre\nbestens bewährt. Durch das Commitment zur Rückwärtskompatibilität sind der Modernisierung von Java als\nProgrammiersprache jedoch enge Grenzen gesteckt. Genau hier sehen wir grosses Potenzial in Kotlin, das beide Welten\n— bewährte Plattform und moderne Programmiersprache — in sich vereinen kann.</p>\n<p>[1]: Neben JVM-Bytecode kann Kotlin auch nach JavaScript oder nativen Programmdateien (MacOS, Windows, Linux) übersetzt\nwerden.<br>[2]: Kotlin-Code kann Java-Code aufrufen und umgekehrt.</p>\n"}],"name":"kotlin","title":"Kotlin","ring":"trial","quadrant":"libraries-frameworks-and-languages","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://kotlinlang.org\">Kotlin</a> ist eine statisch typisierte Programmiersprache, die Konzepte aus der objektorientierten und der\nfunktionalen Programmierung vereint, und viele moderne Sprachfeatures mitbringt. Kotlin-Code wird vom Compiler in\nBytecode für die JVM übersetzt [1], wobei eine grösstmögliche Interoperabilität [2] beider Sprachen gewährleistet wird.\nDadurch lassen sich in Kotlin Java-Libraries und -Frameworks problemlos weiterverwenden, womit bestehendes Knowhow für\nden Java-Programmierer keinesfalls obsolet wird. Diese Interoperabilität erlaubt auch die Integration von Kotlin in\nbestehende Java-Projekte, womit sich Applikationen schrittweise modernisieren lassen.</p>\n<p>Java als Plattform, auf die wir auch in Zukunft setzen möchten, hat sich für Enterprise-Applikationen über viele Jahre\nbestens bewährt. Durch das Commitment zur Rückwärtskompatibilität sind der Modernisierung von Java als\nProgrammiersprache jedoch enge Grenzen gesteckt. Genau hier sehen wir grosses Potenzial in Kotlin, das beide Welten\n— bewährte Plattform und moderne Programmiersprache — in sich vereinen kann.</p>\n<p>[1]: Neben JVM-Bytecode kann Kotlin auch nach JavaScript oder nativen Programmdateien (MacOS, Windows, Linux) übersetzt\nwerden.<br>[2]: Kotlin-Code kann Java-Code aufrufen und umgekehrt.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/kotlin.md"},{"flag":"new","featured":true,"revisions":[{"name":"kubernetes","release":"2023-01-31","title":"Kubernetes","ring":"adopt","quadrant":"platforms","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/kubernetes.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://kubernetes.io/\">Kubernetes</a> ist ein Open-Source-System für die Orchestrierung von Container-Anwendungen. Die\nKernfunktionalitäten von Kubernetes bilden hierbei das automatische Starten von Containern im Bedarfsfall (sei es\naufgrund hoher Last oder eines Ausfalls), das Überwachen der laufenden Container und das Verteilen der Last zwischen\nverschiedenen Containern. Kubernetes erlaubt es so, grosse Anwendungen mit vielen Containern mit deutlich weniger\nRessourcen und mehr Flexibilität hinsichtlich Skalierbarkeit zu realisieren. Kubernetes ist bei einer Vielzahl unserer\nKunden erfolgreich im Einsatz.</p>\n"}],"name":"kubernetes","title":"Kubernetes","ring":"adopt","quadrant":"platforms","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://kubernetes.io/\">Kubernetes</a> ist ein Open-Source-System für die Orchestrierung von Container-Anwendungen. Die\nKernfunktionalitäten von Kubernetes bilden hierbei das automatische Starten von Containern im Bedarfsfall (sei es\naufgrund hoher Last oder eines Ausfalls), das Überwachen der laufenden Container und das Verteilen der Last zwischen\nverschiedenen Containern. Kubernetes erlaubt es so, grosse Anwendungen mit vielen Containern mit deutlich weniger\nRessourcen und mehr Flexibilität hinsichtlich Skalierbarkeit zu realisieren. Kubernetes ist bei einer Vielzahl unserer\nKunden erfolgreich im Einsatz.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/kubernetes.md"},{"flag":"new","featured":true,"revisions":[{"name":"lit","release":"2023-01-31","title":"Lit","ring":"adopt","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/lit.md","body":"<p>Mit <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://lit.dev/\">Lit</a> können effizient agnostische UI-Komponenten für den Browser erstellt werden. Die plattform-nahe Library\nermöglicht einen raschen Einstieg, hohe Wiederverwendbarkeit und einfache Komposition von Komponenten. Ein minimaler\nFootprint und eine durchdachte API sorgen für einen hohen Entwickler- und Benutzer-Komfort.</p>\n<p>Primär setzen wir Lit für kleine und unabhängige UI Komponenten ein. Unter Einbezug weiterer Libraries, z.B. für\nRouting, i18n und Validierung, realisieren wir damit auch komplette Business Applikationen.</p>\n"}],"name":"lit","title":"Lit","ring":"adopt","quadrant":"libraries-frameworks-and-languages","body":"<p>Mit <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://lit.dev/\">Lit</a> können effizient agnostische UI-Komponenten für den Browser erstellt werden. Die plattform-nahe Library\nermöglicht einen raschen Einstieg, hohe Wiederverwendbarkeit und einfache Komposition von Komponenten. Ein minimaler\nFootprint und eine durchdachte API sorgen für einen hohen Entwickler- und Benutzer-Komfort.</p>\n<p>Primär setzen wir Lit für kleine und unabhängige UI Komponenten ein. Unter Einbezug weiterer Libraries, z.B. für\nRouting, i18n und Validierung, realisieren wir damit auch komplette Business Applikationen.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/lit.md"},{"flag":"new","featured":true,"revisions":[{"name":"living-documentation","release":"2023-01-31","title":"Living Documentation","ring":"assess","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/living-documentation.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/geekculture/living-documentation-brief-history-and-evolution-of-the-concept-4492fafb5d7\">Living Documentation</a> hat zum Ziel, die Anforderungen eines Systems und deren Implementierungen\nnäher zueinander zu bringen. Es findet ihren Ursprung in der Welt von Behavior Driven Development (BDD) und ähnelt der\nIdee der ausführbaren Spezifikationen. In der Regel wird dieser Ansatz umgesetzt, indem Akzeptanzkriterien als User\nStories erfasst werden, für die automatisierte Akzeptanztests geschrieben werden. Diese Akzeptanztests werden\nautomatisch bei jeder Änderung des Systems ausgeführt und dokumentieren so die aktuell umgesetzten Features des Systems.</p>\n<p>Da Inventage die meisten Projekte in agiler Form umsetzt, möchten wir uns diesen Ansatz näher ansehen. Bei einigen\nProjekten wird bereits teilweise in diese Richtung gearbeitet.</p>\n"}],"name":"living-documentation","title":"Living Documentation","ring":"assess","quadrant":"concepts-and-methods","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/geekculture/living-documentation-brief-history-and-evolution-of-the-concept-4492fafb5d7\">Living Documentation</a> hat zum Ziel, die Anforderungen eines Systems und deren Implementierungen\nnäher zueinander zu bringen. Es findet ihren Ursprung in der Welt von Behavior Driven Development (BDD) und ähnelt der\nIdee der ausführbaren Spezifikationen. In der Regel wird dieser Ansatz umgesetzt, indem Akzeptanzkriterien als User\nStories erfasst werden, für die automatisierte Akzeptanztests geschrieben werden. Diese Akzeptanztests werden\nautomatisch bei jeder Änderung des Systems ausgeführt und dokumentieren so die aktuell umgesetzten Features des Systems.</p>\n<p>Da Inventage die meisten Projekte in agiler Form umsetzt, möchten wir uns diesen Ansatz näher ansehen. Bei einigen\nProjekten wird bereits teilweise in diese Richtung gearbeitet.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/living-documentation.md"},{"flag":"new","featured":true,"revisions":[{"name":"microservice-architektur","release":"2023-01-31","title":"Microservice-Architektur","ring":"adopt","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/microservice-architektur.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://microservices.io/\">Microservices</a> sind ein Architekturstil, bei dem eine Anwendung als Sammlung kleiner, unabhängiger\nDienste entwickelt wird, die zusammenarbeiten, um eine übergreifende Funktionalität anzubieten. Die einzelnen\nspezialisierten Dienste kommunizieren miteinander über Netzwerkaufrufe.</p>\n<p>Bei Inventage erweitern wir die Definition von Microservices auf das Frontend. Ein Microservice besteht sowohl aus\nMicro-Backend, als auch aus <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://martinfowler.com/articles/micro-frontends.html\">Micro-Frontend</a>. Mit den Micro-Frontends werden unabhängig voneinander\nauslieferbare Frontend-Anwendungen zu einem grösseren Ganzen zusammengefügt. Um solche Micro-Frontends zu entwickeln,\neigenen sich aus unserer Sicht <a href=\"../concepts-and-methods/web-components.html\">Web Components</a>.</p>\n<p>Der Hauptvorteil von Microservices besteht darin, dass die Aufteilung der Applikation in einzelne Dienste es ermöglicht,\nAnwendungen schneller und flexibler zu entwickeln. Jeder einzelne Microservice ist weniger abhängig von anderen Teilen\nder Anwendung. Die Applikation lässt sich erweitern, indem neue Microservices entwickelt und in die bestehende\nArchitektur integriert werden.</p>\n<p>Unsere Erfahrung zeigt aber auch, dass Microservices bei der Entwicklung und Wartung zu einer erhöhten Komplexität\nführen. Einerseits aufgrund der Kommunikation der einzelnen Services über Netzwerkaufrufe, die möglicherweise die\nVerwaltung von Fehlern und die Überwachung von Leistungsproblemen erfordern. Andererseits aufgrund der expliziten\nTrennung des eigentlichen Codes, was Refactorings der Schnittstellen erschwert.</p>\n<p>Zudem braucht es viel Erfahrung, um die Funktionalität sinnvoll in einzelne Dienste zu unterteilen. Wenn es die\nAnforderungen erlauben, haben wir bei Inventage gute Erfahrungen damit gemacht, die Applikation anhand der\nunterschiedlichen Benutzergruppen aufzuteilen. Indem der Dienst einer Benutzergruppe mehrfach installiert wird, lässt\nsich auf diese Weise auch eine Mandantenfähigkeit elegant lösen.</p>\n<p>Über Microservices lassen sich moderne Applikationen in der Cloud entwickeln. Eine genaue Analyse der Anforderungen und\nein Abwägen der Vor- und Nachteile ist aber in jedem Fall erforderlich. Nicht immer sind Microservices die einzige\nLösung, wie eine Software umgesetzt werden kann. Eine Alternative zur Microservice-Architektur ist zum Beispiel der\n<a href=\"../concepts-and-methods/modularized-monolith.html\">modulare Monolith</a>, bei dem ein Monolith in austauschbare und wiederverwendbare Module\nunterteilt wird.</p>\n"}],"name":"microservice-architektur","title":"Microservice-Architektur","ring":"adopt","quadrant":"concepts-and-methods","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://microservices.io/\">Microservices</a> sind ein Architekturstil, bei dem eine Anwendung als Sammlung kleiner, unabhängiger\nDienste entwickelt wird, die zusammenarbeiten, um eine übergreifende Funktionalität anzubieten. Die einzelnen\nspezialisierten Dienste kommunizieren miteinander über Netzwerkaufrufe.</p>\n<p>Bei Inventage erweitern wir die Definition von Microservices auf das Frontend. Ein Microservice besteht sowohl aus\nMicro-Backend, als auch aus <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://martinfowler.com/articles/micro-frontends.html\">Micro-Frontend</a>. Mit den Micro-Frontends werden unabhängig voneinander\nauslieferbare Frontend-Anwendungen zu einem grösseren Ganzen zusammengefügt. Um solche Micro-Frontends zu entwickeln,\neigenen sich aus unserer Sicht <a href=\"../concepts-and-methods/web-components.html\">Web Components</a>.</p>\n<p>Der Hauptvorteil von Microservices besteht darin, dass die Aufteilung der Applikation in einzelne Dienste es ermöglicht,\nAnwendungen schneller und flexibler zu entwickeln. Jeder einzelne Microservice ist weniger abhängig von anderen Teilen\nder Anwendung. Die Applikation lässt sich erweitern, indem neue Microservices entwickelt und in die bestehende\nArchitektur integriert werden.</p>\n<p>Unsere Erfahrung zeigt aber auch, dass Microservices bei der Entwicklung und Wartung zu einer erhöhten Komplexität\nführen. Einerseits aufgrund der Kommunikation der einzelnen Services über Netzwerkaufrufe, die möglicherweise die\nVerwaltung von Fehlern und die Überwachung von Leistungsproblemen erfordern. Andererseits aufgrund der expliziten\nTrennung des eigentlichen Codes, was Refactorings der Schnittstellen erschwert.</p>\n<p>Zudem braucht es viel Erfahrung, um die Funktionalität sinnvoll in einzelne Dienste zu unterteilen. Wenn es die\nAnforderungen erlauben, haben wir bei Inventage gute Erfahrungen damit gemacht, die Applikation anhand der\nunterschiedlichen Benutzergruppen aufzuteilen. Indem der Dienst einer Benutzergruppe mehrfach installiert wird, lässt\nsich auf diese Weise auch eine Mandantenfähigkeit elegant lösen.</p>\n<p>Über Microservices lassen sich moderne Applikationen in der Cloud entwickeln. Eine genaue Analyse der Anforderungen und\nein Abwägen der Vor- und Nachteile ist aber in jedem Fall erforderlich. Nicht immer sind Microservices die einzige\nLösung, wie eine Software umgesetzt werden kann. Eine Alternative zur Microservice-Architektur ist zum Beispiel der\n<a href=\"../concepts-and-methods/modularized-monolith.html\">modulare Monolith</a>, bei dem ein Monolith in austauschbare und wiederverwendbare Module\nunterteilt wird.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/microservice-architektur.md"},{"flag":"new","featured":true,"revisions":[{"name":"minikube","release":"2023-01-31","title":"minikube","ring":"adopt","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/minikube.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://minikube.sigs.k8s.io/docs/start/\">minikube</a> stellt ähnlich wie <a href=\"../tools/kind.html\">kind</a> <a href=\"../platforms/kubernetes.html\">Kubernetes</a>-Cluster bereit, die als Container oder\nalternativ auch mit einem Hypervisor gestartet werden können. Von der Usability her ähnlich einfach wie kind wird\nminikube sowohl als Ad-hoc-Testcluster als auch zur Entwicklung bei Inventage eingesetzt. Da minikube erfahrungsgemäss\netwas langsamer ist als kind, haben wir bisher von einem Einsatz in <a href=\"../concepts-and-methods/ci-cd.html\">CI/CD</a>-Pipelines abgesehen — das\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://minikube.sigs.k8s.io/docs/benchmarks/timetok8s/\">Rennen</a> um schnelle lokale Kubernetes Test- und Enwicklungsumgebungen bleibt jedoch weiterhin spannend.</p>\n"}],"name":"minikube","title":"minikube","ring":"adopt","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://minikube.sigs.k8s.io/docs/start/\">minikube</a> stellt ähnlich wie <a href=\"../tools/kind.html\">kind</a> <a href=\"../platforms/kubernetes.html\">Kubernetes</a>-Cluster bereit, die als Container oder\nalternativ auch mit einem Hypervisor gestartet werden können. Von der Usability her ähnlich einfach wie kind wird\nminikube sowohl als Ad-hoc-Testcluster als auch zur Entwicklung bei Inventage eingesetzt. Da minikube erfahrungsgemäss\netwas langsamer ist als kind, haben wir bisher von einem Einsatz in <a href=\"../concepts-and-methods/ci-cd.html\">CI/CD</a>-Pipelines abgesehen — das\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://minikube.sigs.k8s.io/docs/benchmarks/timetok8s/\">Rennen</a> um schnelle lokale Kubernetes Test- und Enwicklungsumgebungen bleibt jedoch weiterhin spannend.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/minikube.md"},{"flag":"new","featured":true,"revisions":[{"name":"modularized-monolith","release":"2023-01-31","title":"Modularized Monolith","ring":"adopt","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/modularized-monolith.md","body":"<p>Bei <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.infoxicator.com/modular-monoliths-have-we-come-full-circle\">modularen Monolithen</a> handelt es sich um einen Architekturstil, welcher die Unterteilung einer\nApplikation in austauschbare Module mit minimalen Beziehungen vorsieht. Im Gegensatz zu <a href=\"../concepts-and-methods/microservice-architektur.html\">Microservices</a>\nwerden diese jedoch innerhalb derselben Runtime ausgeführt und verwenden dieselbe Datenbank. Dies setzt voraus, dass die\nModule auf demselben Technologie-Stack implementiert werden und dieselben Dependencies verwenden.</p>\n<p>Das Konzept adressiert damit einige der architektonischen und operationellen Nachteile der Microservice-Architektur bei\ngleichzeitiger Bewahrung möglichst vieler der unbestrittenen Vorteile. So können beispielsweise Transaktionen über\nModulgrenzen hinweg bestehen, was das häufig aufwändige Kompensieren von Aktionen im Fehlerfall überflüssig macht.\nAndererseits ist es ohne weiteres möglich, für Querschnittsfunktionen denselben Code wiederzuverwenden. Schliesslich\ngestaltet sich der Betrieb aufgrund der geringeren Anzahl von Komponenten und Schnittstellen einfacher.</p>\n<p>Modulare Monolithen sind jedoch auch mit Nachteilen behaftet. So geht die Fähigkeit verloren, Services unterschiedlichen\nRelease-Zyklen zu unterwerfen. Im Vergleich zu Microservices leidet die Skalierbarkeit, da nur die ganze Applikation — \nund nicht einzelne Services — deployed werden kann. Ausserdem ist es notwendig, die Modulgrenzen zu schützen. Dies kann\nmittels Überwachung der Beziehungen zwischen Modulen als Teil des Build-Prozesses durch <a href=\"../libraries-frameworks-and-languages/archunit.html\">ArchUnit</a> realisiert\nwerden.</p>\n"}],"name":"modularized-monolith","title":"Modularized Monolith","ring":"adopt","quadrant":"concepts-and-methods","body":"<p>Bei <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.infoxicator.com/modular-monoliths-have-we-come-full-circle\">modularen Monolithen</a> handelt es sich um einen Architekturstil, welcher die Unterteilung einer\nApplikation in austauschbare Module mit minimalen Beziehungen vorsieht. Im Gegensatz zu <a href=\"../concepts-and-methods/microservice-architektur.html\">Microservices</a>\nwerden diese jedoch innerhalb derselben Runtime ausgeführt und verwenden dieselbe Datenbank. Dies setzt voraus, dass die\nModule auf demselben Technologie-Stack implementiert werden und dieselben Dependencies verwenden.</p>\n<p>Das Konzept adressiert damit einige der architektonischen und operationellen Nachteile der Microservice-Architektur bei\ngleichzeitiger Bewahrung möglichst vieler der unbestrittenen Vorteile. So können beispielsweise Transaktionen über\nModulgrenzen hinweg bestehen, was das häufig aufwändige Kompensieren von Aktionen im Fehlerfall überflüssig macht.\nAndererseits ist es ohne weiteres möglich, für Querschnittsfunktionen denselben Code wiederzuverwenden. Schliesslich\ngestaltet sich der Betrieb aufgrund der geringeren Anzahl von Komponenten und Schnittstellen einfacher.</p>\n<p>Modulare Monolithen sind jedoch auch mit Nachteilen behaftet. So geht die Fähigkeit verloren, Services unterschiedlichen\nRelease-Zyklen zu unterwerfen. Im Vergleich zu Microservices leidet die Skalierbarkeit, da nur die ganze Applikation — \nund nicht einzelne Services — deployed werden kann. Ausserdem ist es notwendig, die Modulgrenzen zu schützen. Dies kann\nmittels Überwachung der Beziehungen zwischen Modulen als Teil des Build-Prozesses durch <a href=\"../libraries-frameworks-and-languages/archunit.html\">ArchUnit</a> realisiert\nwerden.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/modularized-monolith.md"},{"flag":"new","featured":true,"revisions":[{"name":"oidc","release":"2023-01-31","title":"OIDC","ring":"adopt","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/oidc.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://openid.net/connect/\">OpenID Connect</a> (OIDC) ist ein offener Standard zur Federation von Benutzeridentitäten, basierend\nauf <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://openid.net/specs/openid-authentication-2_0.html\">OpenID</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://oauth.net/2/\">OAuth 2.0</a>. Die beiden Standards werden dabei unter anderem um die Möglichkeiten\nerweitert, nicht nur die Identität des Benutzers zu überprüfen, sondern auch zusätzliche Informationen abzufragen (z.B.\nRollen und Berechtigungen). OIDC adressiert damit ein lange bestehendes Bedürfnis nach einem einfachen, webbasierten\nProtokoll zum Austausch vertrauenswürdiger Authentifizierungs- und Autorisierungsinformationen. Frühere Standards wie\nSAML oder generisches OAuth 2.0 haben sich als zu breit und komplex erwiesen, um eine universale Kompatibilität\nsicherzustellen.</p>\n<p>OIDC geniesst inzwischen sehr breiten Support, nicht zuletzt von der Open-Source IAM Platform <a href=\"../tools/keycloak.html\">Keycloak</a>.</p>\n"}],"name":"oidc","title":"OIDC","ring":"adopt","quadrant":"libraries-frameworks-and-languages","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://openid.net/connect/\">OpenID Connect</a> (OIDC) ist ein offener Standard zur Federation von Benutzeridentitäten, basierend\nauf <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://openid.net/specs/openid-authentication-2_0.html\">OpenID</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://oauth.net/2/\">OAuth 2.0</a>. Die beiden Standards werden dabei unter anderem um die Möglichkeiten\nerweitert, nicht nur die Identität des Benutzers zu überprüfen, sondern auch zusätzliche Informationen abzufragen (z.B.\nRollen und Berechtigungen). OIDC adressiert damit ein lange bestehendes Bedürfnis nach einem einfachen, webbasierten\nProtokoll zum Austausch vertrauenswürdiger Authentifizierungs- und Autorisierungsinformationen. Frühere Standards wie\nSAML oder generisches OAuth 2.0 haben sich als zu breit und komplex erwiesen, um eine universale Kompatibilität\nsicherzustellen.</p>\n<p>OIDC geniesst inzwischen sehr breiten Support, nicht zuletzt von der Open-Source IAM Platform <a href=\"../tools/keycloak.html\">Keycloak</a>.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/oidc.md"},{"flag":"new","featured":true,"revisions":[{"name":"podman","release":"2023-01-31","title":"Podman","ring":"trial","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/podman.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://podman.io/\">Podman</a> ist ein Tool, um OCI-kompatible Container laufen zu lassen, ähnlich wie das ältere Docker. Anders als\nDocker benutzt Podman keinen Daemon, um Container zu erstellen und zu kontrollieren. Dadurch kann es einfacher auf\nPlattformen eingesetzt werden, wo Docker nicht vorhanden ist. Auch können Container mit weniger Berechtigungen erstellt\nwerden, wodurch ein grosses Sicherheitsloch gestopft wird. Podman wird von RedHat entwickelt und gehört zusammen mit\n<a href=\"../tools/buildah.html\">Buildah</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/containers/skopeo\">Skopeo</a> zu einer Tool-Suite für OCI-Container.</p>\n<p>In unseren Projekten benutzen wir bisher hauptsächlich Docker. Ein Austausch durch Podman soll aber evaluiert werden, da\nerste Versuche und Anwendungsfälle mit Podman vielversprechend aussehen.</p>\n"}],"name":"podman","title":"Podman","ring":"trial","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://podman.io/\">Podman</a> ist ein Tool, um OCI-kompatible Container laufen zu lassen, ähnlich wie das ältere Docker. Anders als\nDocker benutzt Podman keinen Daemon, um Container zu erstellen und zu kontrollieren. Dadurch kann es einfacher auf\nPlattformen eingesetzt werden, wo Docker nicht vorhanden ist. Auch können Container mit weniger Berechtigungen erstellt\nwerden, wodurch ein grosses Sicherheitsloch gestopft wird. Podman wird von RedHat entwickelt und gehört zusammen mit\n<a href=\"../tools/buildah.html\">Buildah</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/containers/skopeo\">Skopeo</a> zu einer Tool-Suite für OCI-Container.</p>\n<p>In unseren Projekten benutzen wir bisher hauptsächlich Docker. Ein Austausch durch Podman soll aber evaluiert werden, da\nerste Versuche und Anwendungsfälle mit Podman vielversprechend aussehen.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/podman.md"},{"flag":"new","featured":true,"revisions":[{"name":"postgresql","release":"2023-01-31","title":"PostgreSQL","ring":"adopt","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/postgresql.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.postgresql.org/\">PostgreSQL</a> (oder vereinfacht Postgres) ist eine (objekt-) relationale, quelloffene Datenbank. Postgres\nbietet — im Vergleich zu rein relationalen Datenbanken wie z.B. MySQL — Support für benutzerdefinierte Datentypen und\nunterstützt standardmässig eine Vielzahl nützlicher Datentypen wie z.B. <code>money</code> für die Persistierung von Geldbeträgen.</p>\n<p>Bei Inventage schätzen wir Postgres als hochverfügbare, skalierbare und sichere Datenbank und setzen Postgres in all\njenen Projekten ein, bei denen nicht explizit eine andere Datenbank durch den Kunden erwünscht oder vorgeschrieben\nwird.</p>\n"}],"name":"postgresql","title":"PostgreSQL","ring":"adopt","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.postgresql.org/\">PostgreSQL</a> (oder vereinfacht Postgres) ist eine (objekt-) relationale, quelloffene Datenbank. Postgres\nbietet — im Vergleich zu rein relationalen Datenbanken wie z.B. MySQL — Support für benutzerdefinierte Datentypen und\nunterstützt standardmässig eine Vielzahl nützlicher Datentypen wie z.B. <code>money</code> für die Persistierung von Geldbeträgen.</p>\n<p>Bei Inventage schätzen wir Postgres als hochverfügbare, skalierbare und sichere Datenbank und setzen Postgres in all\njenen Projekten ein, bei denen nicht explizit eine andere Datenbank durch den Kunden erwünscht oder vorgeschrieben\nwird.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/postgresql.md"},{"flag":"new","featured":true,"revisions":[{"name":"postman","release":"2023-01-31","title":"Postman","ring":"hold","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/postman.md","body":"<p>Ursprünglich als Browserplugin konzipiert, hat sich <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.postman.com/\">Postman</a> inzwischen zu einer Plattform entwickelt, die\nbeim Erstellen und Testen von HTTP-APIs unterstützt. Während Postman beim einzelnen Request sehr viel komfortabler zu\nverwenden ist als beispielsweise <code>curl</code>, gestaltet sich die systematische und kollaborative Arbeit eher schwerfällig.</p>\n<p>Strategisch setzen wir deshalb auf das vergleichbare, aber für uns besser geeignete Tool <a href=\"../tools/insomnia.html\">Insomnia</a>.</p>\n"}],"name":"postman","title":"Postman","ring":"hold","quadrant":"tools","body":"<p>Ursprünglich als Browserplugin konzipiert, hat sich <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.postman.com/\">Postman</a> inzwischen zu einer Plattform entwickelt, die\nbeim Erstellen und Testen von HTTP-APIs unterstützt. Während Postman beim einzelnen Request sehr viel komfortabler zu\nverwenden ist als beispielsweise <code>curl</code>, gestaltet sich die systematische und kollaborative Arbeit eher schwerfällig.</p>\n<p>Strategisch setzen wir deshalb auf das vergleichbare, aber für uns besser geeignete Tool <a href=\"../tools/insomnia.html\">Insomnia</a>.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/postman.md"},{"flag":"new","featured":true,"revisions":[{"name":"quarkus","release":"2023-01-31","title":"Quarkus","ring":"adopt","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/quarkus.md","body":"<p>Mit <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://quarkus.io/\">Quarkus</a> lassen sich für die Cloud optimierte Anwendungen entwickeln. Etablierte und bewährte\nJava-Frameworks und -Bibliotheken (Best of Breed) können via Quarkus Extensions weiterhin verwendet werden, wovon auch\nunsere Kunden profitieren. Durch Optimierungen, die Quarkus zur Build-Zeit vornimmt, kommen die Benutzer unserer\nApplikationen zudem in den Genuss von schnellen Applikations-Starts, sowie einem niedrigen Bedarf an Speicher- und\nCPU-Ressourcen.</p>\n<p>Quarkus stellt für uns eine gute Alternative zu <a href=\"../libraries-frameworks-and-languages/jakarta-ee.html\">Jakarta EE</a> dar. Aktuell realisieren wir mehrere Projekte basierend\nauf Quarkus. Dabei entstehen Portal-Lösungen, Microservices im Openshift- bzw. <a href=\"../platforms/kubernetes.html\">Kubernetes</a>-Umfeld oder auch\nmonolithische Applikationen.</p>\n"}],"name":"quarkus","title":"Quarkus","ring":"adopt","quadrant":"libraries-frameworks-and-languages","body":"<p>Mit <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://quarkus.io/\">Quarkus</a> lassen sich für die Cloud optimierte Anwendungen entwickeln. Etablierte und bewährte\nJava-Frameworks und -Bibliotheken (Best of Breed) können via Quarkus Extensions weiterhin verwendet werden, wovon auch\nunsere Kunden profitieren. Durch Optimierungen, die Quarkus zur Build-Zeit vornimmt, kommen die Benutzer unserer\nApplikationen zudem in den Genuss von schnellen Applikations-Starts, sowie einem niedrigen Bedarf an Speicher- und\nCPU-Ressourcen.</p>\n<p>Quarkus stellt für uns eine gute Alternative zu <a href=\"../libraries-frameworks-and-languages/jakarta-ee.html\">Jakarta EE</a> dar. Aktuell realisieren wir mehrere Projekte basierend\nauf Quarkus. Dabei entstehen Portal-Lösungen, Microservices im Openshift- bzw. <a href=\"../platforms/kubernetes.html\">Kubernetes</a>-Umfeld oder auch\nmonolithische Applikationen.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/quarkus.md"},{"flag":"new","featured":true,"revisions":[{"name":"redpanda","release":"2023-01-31","title":"Redpanda","ring":"assess","quadrant":"platforms","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/redpanda.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://redpanda.com/\">Redpanda</a> ist eine <a href=\"../platforms/kafka.html\">Kafka</a>-kompatible Daten-Streaming-Plattform. Sie ist gemäss eigener Beschreibung\nleichter, performanter und einfacher im Setup.</p>\n<p>In unseren Cloud-basierten Microservice-Applikationen werden Daten oft via Kafka gestreamt. Wir möchten daher prüfen, ob\nRedpanda tatsächlich ein leichterer, performanterer Ersatz für Kafka ist, der den Ansprüchen in der Entwicklung oder in\nder Produktion bezüglich Stabilität, Performance und Ressourcenbedarf genügt und Kafka ebenbürtig ist oder dieses sogar\nübertrifft.</p>\n"}],"name":"redpanda","title":"Redpanda","ring":"assess","quadrant":"platforms","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://redpanda.com/\">Redpanda</a> ist eine <a href=\"../platforms/kafka.html\">Kafka</a>-kompatible Daten-Streaming-Plattform. Sie ist gemäss eigener Beschreibung\nleichter, performanter und einfacher im Setup.</p>\n<p>In unseren Cloud-basierten Microservice-Applikationen werden Daten oft via Kafka gestreamt. Wir möchten daher prüfen, ob\nRedpanda tatsächlich ein leichterer, performanterer Ersatz für Kafka ist, der den Ansprüchen in der Entwicklung oder in\nder Produktion bezüglich Stabilität, Performance und Ressourcenbedarf genügt und Kafka ebenbürtig ist oder dieses sogar\nübertrifft.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/redpanda.md"},{"flag":"new","featured":true,"revisions":[{"name":"rest-assured","release":"2023-01-31","title":"REST Assured","ring":"adopt","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/rest-assured.md","body":"<p>Unter Schnittstellen-Tests versteht man das Prüfen von Programmierschnittstellen (APIs). Die Schnittstelle wird zum\neinen auf ihre Gültigkeit (syntaktisch, regelkonform) als auch auf ihre Korrektheit (semantisch, gültige Werte) aufgrund\nder Eingabedaten getestet. Dabei wird geprüft, ob die Ausgabedaten dem erwarteten Ergebnis für die übergebenen\nEingabedaten entsprechen. Dazu wird die Schnittstelle nicht simuliert, sondern real ausgeführt. Dies stellt sicher, dass\nKomponenten oder Systeme korrekt miteinander interagieren. Die Tests werden durch die Entwickler erstellt und können\nlokal während der Entwicklung oder während dem Build ausgeführt werden.</p>\n<p>Um Schnittstellen zu testen verwenden wir <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://rest-assured.io/\">REST Assured</a>, womit Tests von REST-APIs in Java-Code\nimplementiert werden können. Zudem bringt REST Assured effiziente Vergleichsmethoden mit, die das Auswerten der\nErgebnisse vereinfachen. Die Daten können dabei, unabhängig davon, wie komplex die JSON-Struktur ist, aus fast jedem\nTeil der Anfrage und Antwort ausgelesen werden.</p>\n"}],"name":"rest-assured","title":"REST Assured","ring":"adopt","quadrant":"libraries-frameworks-and-languages","body":"<p>Unter Schnittstellen-Tests versteht man das Prüfen von Programmierschnittstellen (APIs). Die Schnittstelle wird zum\neinen auf ihre Gültigkeit (syntaktisch, regelkonform) als auch auf ihre Korrektheit (semantisch, gültige Werte) aufgrund\nder Eingabedaten getestet. Dabei wird geprüft, ob die Ausgabedaten dem erwarteten Ergebnis für die übergebenen\nEingabedaten entsprechen. Dazu wird die Schnittstelle nicht simuliert, sondern real ausgeführt. Dies stellt sicher, dass\nKomponenten oder Systeme korrekt miteinander interagieren. Die Tests werden durch die Entwickler erstellt und können\nlokal während der Entwicklung oder während dem Build ausgeführt werden.</p>\n<p>Um Schnittstellen zu testen verwenden wir <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://rest-assured.io/\">REST Assured</a>, womit Tests von REST-APIs in Java-Code\nimplementiert werden können. Zudem bringt REST Assured effiziente Vergleichsmethoden mit, die das Auswerten der\nErgebnisse vereinfachen. Die Daten können dabei, unabhängig davon, wie komplex die JSON-Struktur ist, aus fast jedem\nTeil der Anfrage und Antwort ausgelesen werden.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/rest-assured.md"},{"flag":"new","featured":true,"revisions":[{"name":"secure-software-supply-chain","release":"2023-01-31","title":"Secure Software Supply-Chain","ring":"adopt","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/secure-software-supply-chain.md","body":"<p>Eine Secure Software Supply-Chain (SSSC) stellt sicher, dass nur vertrauenswürdige Software in eine Organisation\ngelangt. Dies umfasst die Überwachung und Überprüfung von Drittanbietersoftware, die Verwendung von Signaturverfahren\nzur Überprüfung der Integrität von Software und die Implementierung von Prozessen zur schnellen Erkennung und Reaktion\nauf Sicherheitsbedrohungen. Die Umsetzung einer SSSC gewährleistet die Sicherheit und Integrität von IT-Systemen und\nverhindert Angriffe durch manipulierte Software.</p>\n<p>Beliebte Softwarelösungen in diesem Bereich sind <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.mend.io\">Mend</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.sonatype.com/products/open-source-security-dependency-management\">Nexus Lifecycle</a>, welche als Teil\nder <a href=\"../concepts-and-methods/ci-cd.html\">CI/CD</a>-Pipeline Abhängigkeiten auf verschiedenste Faktoren prüfen und im laufenden Betrieb auf neue\nSicherheitsbedrohungen aufmerksam machen. Bei Inventage setzen wir auf Nexus Lifecycle. Der Quellcode wird bei jedem\nBuild der Software auf mögliche Schwachstellen überprüft.</p>\n"}],"name":"secure-software-supply-chain","title":"Secure Software Supply-Chain","ring":"adopt","quadrant":"concepts-and-methods","body":"<p>Eine Secure Software Supply-Chain (SSSC) stellt sicher, dass nur vertrauenswürdige Software in eine Organisation\ngelangt. Dies umfasst die Überwachung und Überprüfung von Drittanbietersoftware, die Verwendung von Signaturverfahren\nzur Überprüfung der Integrität von Software und die Implementierung von Prozessen zur schnellen Erkennung und Reaktion\nauf Sicherheitsbedrohungen. Die Umsetzung einer SSSC gewährleistet die Sicherheit und Integrität von IT-Systemen und\nverhindert Angriffe durch manipulierte Software.</p>\n<p>Beliebte Softwarelösungen in diesem Bereich sind <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.mend.io\">Mend</a> und <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.sonatype.com/products/open-source-security-dependency-management\">Nexus Lifecycle</a>, welche als Teil\nder <a href=\"../concepts-and-methods/ci-cd.html\">CI/CD</a>-Pipeline Abhängigkeiten auf verschiedenste Faktoren prüfen und im laufenden Betrieb auf neue\nSicherheitsbedrohungen aufmerksam machen. Bei Inventage setzen wir auf Nexus Lifecycle. Der Quellcode wird bei jedem\nBuild der Software auf mögliche Schwachstellen überprüft.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/secure-software-supply-chain.md"},{"flag":"new","featured":true,"revisions":[{"name":"server-side-rendering-ssr","release":"2023-01-31","title":"Server Side Rendering (SSR)","ring":"assess","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/server-side-rendering-ssr.md","body":"<p>Server Side Rendering (SSR) hat zum Ziel, häufig auftretende Probleme von Single-Page-Applikationen (SPA) zu lösen. Dazu\ngehören eine lange Wartezeit, bis der erste Inhalt sichtbar ist, sowie ungünstige Eigenschaften im Bereich der Search\nEngine Optimization (SEO). SSR adressiert diese Probleme, indem die endgültige HTML-Datei vom Server aufbereitet und zum\nClient geschickt wird. Der Client fügt dann in einem Prozess, der Hydration genannt wird, bei Bedarf die notwendige\nInteraktivität hinzu.</p>\n<p>Die Inventage positioniert sich als Experte in allen Bereichen des Software Engineering. Dazu gehört auch die\nFrontend-Entwicklung, weshalb es sinnvoll ist, moderne Ansätze wie SSR zu beobachten und zu evaluieren. Konkret eingesetzt\nwird dieser Ansatz derzeit aber nur bei statischen Webseiten ohne Interaktivität.</p>\n"}],"name":"server-side-rendering-ssr","title":"Server Side Rendering (SSR)","ring":"assess","quadrant":"concepts-and-methods","body":"<p>Server Side Rendering (SSR) hat zum Ziel, häufig auftretende Probleme von Single-Page-Applikationen (SPA) zu lösen. Dazu\ngehören eine lange Wartezeit, bis der erste Inhalt sichtbar ist, sowie ungünstige Eigenschaften im Bereich der Search\nEngine Optimization (SEO). SSR adressiert diese Probleme, indem die endgültige HTML-Datei vom Server aufbereitet und zum\nClient geschickt wird. Der Client fügt dann in einem Prozess, der Hydration genannt wird, bei Bedarf die notwendige\nInteraktivität hinzu.</p>\n<p>Die Inventage positioniert sich als Experte in allen Bereichen des Software Engineering. Dazu gehört auch die\nFrontend-Entwicklung, weshalb es sinnvoll ist, moderne Ansätze wie SSR zu beobachten und zu evaluieren. Konkret eingesetzt\nwird dieser Ansatz derzeit aber nur bei statischen Webseiten ohne Interaktivität.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/server-side-rendering-ssr.md"},{"flag":"new","featured":true,"revisions":[{"name":"solid","release":"2023-01-31","title":"Solid","ring":"assess","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/solid.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidproject.org/\">Solid</a> ist eine <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/solid/specification\">Spezifikation</a> der <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://lists.w3.org/Archives/Public/public-solid/2022Nov/0001.html\">W3C Solid Working Group</a> für Systeme, die es\nBenutzern erlauben, ihre Daten in sicheren und dezentralen Speichern (Pods) zu halten. Dadurch behalten sie die\nKontrolle über ihre eigenen Daten und stellen diese anderen gezielt zur Verfügung. Die Verwendung von <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.w3.org/standards/semanticweb/data\">Linked\nData</a> und dessen standardisiertem Datenformat ermöglicht dabei die Verlinkung über die Grenzen eines Pod\nhinweg und bildet so die Grundlage des Semantic-Web. Dank dem gemeinsamen Datenformat (RDF) ist es möglich, eine\nTrennung der Daten von den sie bearbeitenden Applikationen zu erreichen.</p>\n<p>Wir beobachten mit grossem Interesse die Entwicklung von Solid, die immer stärker werdende Verbreitung (z.B. in Belgien,\nBBC) und sammeln mit Prototypen erste Erfahrungen. Weil viele unserer Kunden bereits über ein gutes Vertrauensverhältnis\nzu ihren Endkunden verfügen, sehen wir die Chance, für unsere Kunden als Pod-Anbieter aufzutreten und dadurch ganz neue\nund innovative digitale Dienste anbieten zu können.</p>\n"}],"name":"solid","title":"Solid","ring":"assess","quadrant":"concepts-and-methods","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidproject.org/\">Solid</a> ist eine <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/solid/specification\">Spezifikation</a> der <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://lists.w3.org/Archives/Public/public-solid/2022Nov/0001.html\">W3C Solid Working Group</a> für Systeme, die es\nBenutzern erlauben, ihre Daten in sicheren und dezentralen Speichern (Pods) zu halten. Dadurch behalten sie die\nKontrolle über ihre eigenen Daten und stellen diese anderen gezielt zur Verfügung. Die Verwendung von <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.w3.org/standards/semanticweb/data\">Linked\nData</a> und dessen standardisiertem Datenformat ermöglicht dabei die Verlinkung über die Grenzen eines Pod\nhinweg und bildet so die Grundlage des Semantic-Web. Dank dem gemeinsamen Datenformat (RDF) ist es möglich, eine\nTrennung der Daten von den sie bearbeitenden Applikationen zu erreichen.</p>\n<p>Wir beobachten mit grossem Interesse die Entwicklung von Solid, die immer stärker werdende Verbreitung (z.B. in Belgien,\nBBC) und sammeln mit Prototypen erste Erfahrungen. Weil viele unserer Kunden bereits über ein gutes Vertrauensverhältnis\nzu ihren Endkunden verfügen, sehen wir die Chance, für unsere Kunden als Pod-Anbieter aufzutreten und dadurch ganz neue\nund innovative digitale Dienste anbieten zu können.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/solid.md"},{"flag":"new","featured":true,"revisions":[{"name":"spring-boot","release":"2023-01-31","title":"Spring Boot","ring":"adopt","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/spring-boot.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://spring.io/projects/spring-boot\">Spring Boot</a> bietet eine schnelle und einfache Möglichkeit, Java-Applikationen zu erstellen und zu\nstarten, indem viele gängige Konfigurationen und Abhängigkeiten automatisiert verwaltet werden. Dabei\ngeht keine Flexibilität verloren, eine manuelle Konfiguration der verwendeten Komponenten ist jederzeit möglich. Spring\nBoot unterstützt zudem die Verwendung von modernen Technologien wie Cloud-native Architekturen und Containerisierung,\nwodurch es in den letzten Jahren an Popularität gewonnen hat und zu einem wichtigen Bestandteil des Java-Ökosystems\ngeworden ist.</p>\n"}],"name":"spring-boot","title":"Spring Boot","ring":"adopt","quadrant":"libraries-frameworks-and-languages","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://spring.io/projects/spring-boot\">Spring Boot</a> bietet eine schnelle und einfache Möglichkeit, Java-Applikationen zu erstellen und zu\nstarten, indem viele gängige Konfigurationen und Abhängigkeiten automatisiert verwaltet werden. Dabei\ngeht keine Flexibilität verloren, eine manuelle Konfiguration der verwendeten Komponenten ist jederzeit möglich. Spring\nBoot unterstützt zudem die Verwendung von modernen Technologien wie Cloud-native Architekturen und Containerisierung,\nwodurch es in den letzten Jahren an Popularität gewonnen hat und zu einem wichtigen Bestandteil des Java-Ökosystems\ngeworden ist.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/spring-boot.md"},{"flag":"new","featured":true,"revisions":[{"name":"testcontainers","release":"2023-01-31","title":"Testcontainers","ring":"trial","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/testcontainers.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.testcontainers.org/\">Testcontainers</a> (for Java [1]) ist eine Bibliothek, welche die Verwendung von Docker-Containern\ninnerhalb von JUnit-Tests ermöglicht. Wir verwenden Testcontainers unter anderem für die Realisierung von\nIntegrationstests bei unseren <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://uniport.ch/\">Uniport</a>-Projekten — z.B. um den Datenbankzugriffs-Layer zu testen.\n<a href=\"../libraries-frameworks-and-languages/quarkus.html\">Quarkus</a> bietet eine sehr gute Integration von Testcontainers, sodass dessen Einsatz insbesondere bei unseren\nQuarkus-basierten Projekten nichts im Wege steht.</p>\n<p>[1] die Bibliothek gibt es auch für weitere Sprachen wie z.B. Go, Python oder .NET</p>\n"}],"name":"testcontainers","title":"Testcontainers","ring":"trial","quadrant":"libraries-frameworks-and-languages","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.testcontainers.org/\">Testcontainers</a> (for Java [1]) ist eine Bibliothek, welche die Verwendung von Docker-Containern\ninnerhalb von JUnit-Tests ermöglicht. Wir verwenden Testcontainers unter anderem für die Realisierung von\nIntegrationstests bei unseren <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://uniport.ch/\">Uniport</a>-Projekten — z.B. um den Datenbankzugriffs-Layer zu testen.\n<a href=\"../libraries-frameworks-and-languages/quarkus.html\">Quarkus</a> bietet eine sehr gute Integration von Testcontainers, sodass dessen Einsatz insbesondere bei unseren\nQuarkus-basierten Projekten nichts im Wege steht.</p>\n<p>[1] die Bibliothek gibt es auch für weitere Sprachen wie z.B. Go, Python oder .NET</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/testcontainers.md"},{"flag":"new","featured":true,"revisions":[{"name":"turbopack","release":"2023-01-31","title":"Turbopack","ring":"assess","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/turbopack.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://turbo.build/pack\">Turbopack</a> ist ein Next-Generation-Bundler. Er positioniert sich als Nachfolger von <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://webpack.js.org/\">Webpack</a> und\ndie Entwicklung wird vom Gründer von Webpack geleitet. Turbopack ist um einiges schneller als die existierenden Bundler.\nDer Hauptgrund ist, dass Turbopack eine in Rust geschriebene Ausführungseinheit namens Turbo-Engine hat, die eine\ninkrementelle Kompilierung erlaubt. In der Praxis bedeutet dies, dass eine Funktion nur einmal aufgerufen wird und die\nResultate davon zwischengespeichert werden, wodurch der Entwicklungsprozess beschleunigt wird.</p>\n"}],"name":"turbopack","title":"Turbopack","ring":"assess","quadrant":"libraries-frameworks-and-languages","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://turbo.build/pack\">Turbopack</a> ist ein Next-Generation-Bundler. Er positioniert sich als Nachfolger von <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://webpack.js.org/\">Webpack</a> und\ndie Entwicklung wird vom Gründer von Webpack geleitet. Turbopack ist um einiges schneller als die existierenden Bundler.\nDer Hauptgrund ist, dass Turbopack eine in Rust geschriebene Ausführungseinheit namens Turbo-Engine hat, die eine\ninkrementelle Kompilierung erlaubt. In der Praxis bedeutet dies, dass eine Funktion nur einmal aufgerufen wird und die\nResultate davon zwischengespeichert werden, wodurch der Entwicklungsprozess beschleunigt wird.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/turbopack.md"},{"flag":"new","featured":true,"revisions":[{"name":"typescript","release":"2023-01-31","title":"TypeScript","ring":"adopt","quadrant":"libraries-frameworks-and-languages","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/typescript.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.typescriptlang.org/\">TypeScript</a> ist eine Obermenge von JavaScript und ergänzt sie mit typisierten Sprachkonstrukten. Der\nQuellcode wird vom TypeScript-Compiler nach JavaScript (ECMAScript) kompiliert und kann in allen gängigen Browsern\nausgeführt werden. Grössere Web-Applikationen lassen sich dank der Typisierung bedeutend robuster und komfortabler in\nTypeScript umsetzen als reine JavaScript-Projekte, was sich positiv auf deren Codequalität und Wartbarkeit\nniederschlägt.</p>\n"}],"name":"typescript","title":"TypeScript","ring":"adopt","quadrant":"libraries-frameworks-and-languages","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.typescriptlang.org/\">TypeScript</a> ist eine Obermenge von JavaScript und ergänzt sie mit typisierten Sprachkonstrukten. Der\nQuellcode wird vom TypeScript-Compiler nach JavaScript (ECMAScript) kompiliert und kann in allen gängigen Browsern\nausgeführt werden. Grössere Web-Applikationen lassen sich dank der Typisierung bedeutend robuster und komfortabler in\nTypeScript umsetzen als reine JavaScript-Projekte, was sich positiv auf deren Codequalität und Wartbarkeit\nniederschlägt.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/typescript.md"},{"flag":"new","featured":true,"revisions":[{"name":"vite","release":"2023-01-31","title":"Vite","ring":"assess","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/vite.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://vitejs.dev/\">Vite</a> ist ein Dev-Server und Bundler für <a href=\"../libraries-frameworks-and-languages/javascript.html\">JavaScript</a>- und <a href=\"../libraries-frameworks-and-languages/typescript.html\">TypeScript</a>-Applikationen.\nUnabhängig von der Projektgrösse garantiert der Dev-Server schnelle Ladezeiten, da nur benötigter Code ausgeliefert\nwird, Bundles unnötig sind und transpilierter Code zwischengespeichert wird. Auch der Produktions-Build kann mittels CLI\ngestartet werden und benötigt initial keine Konfiguration. Mittels Rollup-Based-Plugins können der Produktions-Build\nmodifiziert und diverse Web-Frameworks unterstützt werden.</p>\n"}],"name":"vite","title":"Vite","ring":"assess","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://vitejs.dev/\">Vite</a> ist ein Dev-Server und Bundler für <a href=\"../libraries-frameworks-and-languages/javascript.html\">JavaScript</a>- und <a href=\"../libraries-frameworks-and-languages/typescript.html\">TypeScript</a>-Applikationen.\nUnabhängig von der Projektgrösse garantiert der Dev-Server schnelle Ladezeiten, da nur benötigter Code ausgeliefert\nwird, Bundles unnötig sind und transpilierter Code zwischengespeichert wird. Auch der Produktions-Build kann mittels CLI\ngestartet werden und benötigt initial keine Konfiguration. Mittels Rollup-Based-Plugins können der Produktions-Build\nmodifiziert und diverse Web-Frameworks unterstützt werden.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/vite.md"},{"flag":"new","featured":true,"revisions":[{"name":"web-assembly","release":"2023-01-31","title":"Web Assembly","ring":"assess","quadrant":"platforms","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/web-assembly.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://webassembly.org/\">Web Assembly</a> definiert einen Bytecode, der performant innerhalb des Webbrowsers ausgeführt wird. Dabei\nwerden unterschiedliche Programmiersprachen unterstützt. Rechenintensive Algorithmen können ins Frontend portiert\nwerden, sodass Server und Netzwerk entlastet werden. Backend-Code kann direkt für den Browser aufbereitet und\nwiederverwendet werden. Dies ist für eine Reihe von <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://webassembly.org/docs/use-cases/\">Anwendungsfällen</a> interessant, wie z.B. Verschlüsselung,\nSignierung, Komprimierung, Visualisierungen oder Simulationen.</p>\n"}],"name":"web-assembly","title":"Web Assembly","ring":"assess","quadrant":"platforms","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://webassembly.org/\">Web Assembly</a> definiert einen Bytecode, der performant innerhalb des Webbrowsers ausgeführt wird. Dabei\nwerden unterschiedliche Programmiersprachen unterstützt. Rechenintensive Algorithmen können ins Frontend portiert\nwerden, sodass Server und Netzwerk entlastet werden. Backend-Code kann direkt für den Browser aufbereitet und\nwiederverwendet werden. Dies ist für eine Reihe von <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://webassembly.org/docs/use-cases/\">Anwendungsfällen</a> interessant, wie z.B. Verschlüsselung,\nSignierung, Komprimierung, Visualisierungen oder Simulationen.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/web-assembly.md"},{"flag":"new","featured":true,"revisions":[{"name":"web-components","release":"2023-01-31","title":"Web Components","ring":"adopt","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/web-components.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://webcomponents.today/\">Web Components</a> sind das native Komponentenmodell des Web. Sie sind heute weitverbreitet, in allen\nmodernen Browsern unterstützt und können durch ihre hohe Interoperabilität in allen modernen Frameworks ohne Weiteres\neingebunden werden. Sogar gewisse UI-Elemente der heutigen Browser sind mit Webkomponenten implementiert.</p>\n<p>Die Schnittstellen zwischen der Aussenwelt und den Komponenten sind klar definiert. Wie das Innenleben einer Komponente\nimplementiert ist, spielt dabei keine Rolle, solange die Standards und offiziellen APIs eingehalten werden.</p>\n<p>Für das Erstellen von Webkomponenten verwenden wir in den meisten Projekten die JavaScript-Bibliothek <a href=\"../libraries-frameworks-and-languages/lit.html\">Lit</a> und\nhaben damit schon ganze Applikationen implementiert. Für komplexe Applikationen sehen wir allerdings auch den Mehrwert\nvon etablierten Frameworks wie <a href=\"../libraries-frameworks-and-languages/angular.html\">Angular</a>, weil darin viele Architekturkonzepte einer modernen Applikation\numgesetzt sind und zur Verfügung gestellt werden.</p>\n"}],"name":"web-components","title":"Web Components","ring":"adopt","quadrant":"concepts-and-methods","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://webcomponents.today/\">Web Components</a> sind das native Komponentenmodell des Web. Sie sind heute weitverbreitet, in allen\nmodernen Browsern unterstützt und können durch ihre hohe Interoperabilität in allen modernen Frameworks ohne Weiteres\neingebunden werden. Sogar gewisse UI-Elemente der heutigen Browser sind mit Webkomponenten implementiert.</p>\n<p>Die Schnittstellen zwischen der Aussenwelt und den Komponenten sind klar definiert. Wie das Innenleben einer Komponente\nimplementiert ist, spielt dabei keine Rolle, solange die Standards und offiziellen APIs eingehalten werden.</p>\n<p>Für das Erstellen von Webkomponenten verwenden wir in den meisten Projekten die JavaScript-Bibliothek <a href=\"../libraries-frameworks-and-languages/lit.html\">Lit</a> und\nhaben damit schon ganze Applikationen implementiert. Für komplexe Applikationen sehen wir allerdings auch den Mehrwert\nvon etablierten Frameworks wie <a href=\"../libraries-frameworks-and-languages/angular.html\">Angular</a>, weil darin viele Architekturkonzepte einer modernen Applikation\numgesetzt sind und zur Verfügung gestellt werden.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/web-components.md"},{"flag":"new","featured":true,"revisions":[{"name":"web-dev-server","release":"2023-01-31","title":"Web Dev Server","ring":"adopt","quadrant":"tools","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/web-dev-server.md","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://modern-web.dev/docs/dev-server/overview/\">Web Dev Server</a> ist ein Dev-Server für JavaScript-Applikationen. Unabhängig von der Projektgrösse\ngarantiert der Dev-Server schnelle Ladezeiten, da nur benötigter Code ausgeliefert wird, Bundles unnötig sind und\ntranspilierter Code zwischengespeichert wird.</p>\n<p>Wir schätzen den Dev-Server aufgrund seiner Leichtigkeit, Effizienz und Anpassungsfähigkeit.</p>\n"}],"name":"web-dev-server","title":"Web Dev Server","ring":"adopt","quadrant":"tools","body":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://modern-web.dev/docs/dev-server/overview/\">Web Dev Server</a> ist ein Dev-Server für JavaScript-Applikationen. Unabhängig von der Projektgrösse\ngarantiert der Dev-Server schnelle Ladezeiten, da nur benötigter Code ausgeliefert wird, Bundles unnötig sind und\ntranspilierter Code zwischengespeichert wird.</p>\n<p>Wir schätzen den Dev-Server aufgrund seiner Leichtigkeit, Effizienz und Anpassungsfähigkeit.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/web-dev-server.md"},{"flag":"new","featured":true,"revisions":[{"name":"zero-bug-policy","release":"2023-01-31","title":"Zero Bug Policy","ring":"assess","quadrant":"concepts-and-methods","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/zero-bug-policy.md","body":"<p>In vielen Organisationen wird der Pflege des Backlogs grosse Aufmerksamkeit zuteil. Im Backlog finden sich neben\nStories, welche neue Anforderungen adressieren, auch Bugs. Selbstredend liegt es für den Produktverantwortlichen nahe,\nneue Funktionalität höher zu priorisieren, sodass das Reparieren von Bugs — oder genereller die Arbeit am &quot;Technical\nDebt&quot; — häufig das Nachsehen hat. Mit der Zeit wächst die Zahl der Bugs. Diese werden mit Screenshots und\nDatenbeispielen dokumentiert und die Schritte zum Reproduzieren werden festgehalten. Dann wird das Risiko abgeschätzt\nund der Impact auf das Business beim Verantwortlichen erfragt. Mit der Weiterentwicklung der Software altern die Bugs\nund diese Schritte werden mit wachsendem Aufwand periodisch wiederholt. </p>\n<p>Die <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.scrum.org/resources/blog/zero-bug-policy-fast-way-paying-back-technical-debt\">Zero Bug Policy</a> verlangt, dass die Anzahl Bugs nicht anwachsen darf. Werden in einem Sprint neue Bugs\nrapportiert, müssen sie im nächsten Sprint gelöst werden. Ist dies nicht der Fall, werden sie gelöscht. Der Gedanke\ndabei ist, dass Bugs, die ohnehin nicht behoben werden, auch nicht unterhalten werden sollen.</p>\n"}],"name":"zero-bug-policy","title":"Zero Bug Policy","ring":"assess","quadrant":"concepts-and-methods","body":"<p>In vielen Organisationen wird der Pflege des Backlogs grosse Aufmerksamkeit zuteil. Im Backlog finden sich neben\nStories, welche neue Anforderungen adressieren, auch Bugs. Selbstredend liegt es für den Produktverantwortlichen nahe,\nneue Funktionalität höher zu priorisieren, sodass das Reparieren von Bugs — oder genereller die Arbeit am &quot;Technical\nDebt&quot; — häufig das Nachsehen hat. Mit der Zeit wächst die Zahl der Bugs. Diese werden mit Screenshots und\nDatenbeispielen dokumentiert und die Schritte zum Reproduzieren werden festgehalten. Dann wird das Risiko abgeschätzt\nund der Impact auf das Business beim Verantwortlichen erfragt. Mit der Weiterentwicklung der Software altern die Bugs\nund diese Schritte werden mit wachsendem Aufwand periodisch wiederholt. </p>\n<p>Die <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.scrum.org/resources/blog/zero-bug-policy-fast-way-paying-back-technical-debt\">Zero Bug Policy</a> verlangt, dass die Anzahl Bugs nicht anwachsen darf. Werden in einem Sprint neue Bugs\nrapportiert, müssen sie im nächsten Sprint gelöst werden. Ist dies nicht der Fall, werden sie gelöscht. Der Gedanke\ndabei ist, dass Bugs, die ohnehin nicht behoben werden, auch nicht unterhalten werden sollen.</p>\n","info":"","release":"2023-01-31","fileName":"/home/runner/work/techradar/techradar/radar/2023-01-31/zero-bug-policy.md"}],"releases":["2023-01-31"]}